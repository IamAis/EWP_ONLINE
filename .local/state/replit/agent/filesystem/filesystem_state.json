{"file_contents":{"README.md":{"content":"# WorkutMaker\n# EasyWorkoutPlanner\n# EasyWorkoutPlanner\n# Workout\n# EWP\n# EWP\n# EWP_BUILD\n","size_bytes":90},"capacitor.config.ts":{"content":"import type { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.ais.ewp',\n  appName: 'EasyWorkoutPlanner',\n  webDir: 'dist'\n};\n\nexport default config;\n","size_bytes":191},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"#Problemi\nIl tasto Inizia a Creare > Crea Nuova Scheda è scollegato\nLa mail è opzionale ma va messa per forza\nI clienti nn sono importabili | In alternativa se si inserisce un Cliente che nn abbiamo gia caricato. Il sistema ignora\nServono delle possibili modifiche di stile del'export\nC'è la filigrana\nla modalità giorno è troppo chiara\n\n# Fitness Coach Workout Manager\n\nA comprehensive full-stack application for fitness coaches to create, manage, and share workout plans with their clients.\n\n## Project Overview\n\nThis is a React-based fitness management application with an Express.js backend. The app allows fitness coaches to:\n- Create and manage client profiles\n- Design detailed workout routines with exercises, sets, reps, and rest periods\n- Organize workouts by days and weeks\n- Generate PDF workout plans\n- Track client progress\n\n## Technical Architecture\n\n### Frontend (React + TypeScript)\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state\n- **UI Components**: Radix UI with Tailwind CSS\n- **Forms**: React Hook Form with Zod validation\n- **Theme**: Dark/light mode support with next-themes\n\n### Backend (Express + TypeScript)\n- **Framework**: Express.js with TypeScript\n- **Development**: tsx for hot reloading\n- **Storage**: In-memory storage (configurable for database)\n- **API**: RESTful endpoints under `/api` prefix\n\n### Key Features\n- **Multi-week workout planning**: Organize exercises by days and weeks\n- **Exercise management**: Detailed exercise tracking with sets, reps, load, rest periods\n- **Client management**: Store and organize client information\n- **PDF generation**: Export workout plans as PDFs\n- **Responsive design**: Mobile-first design with bottom navigation\n- **Theme support**: Light and dark mode\n\n## Project Structure\n\n```\n├── client/src/           # Frontend React application\n│   ├── components/       # Reusable UI components\n│   ├── pages/           # Route components\n│   ├── hooks/           # Custom React hooks\n│   └── lib/             # Utilities and configuration\n├── server/              # Backend Express application\n│   ├── index.ts         # Main server entry point\n│   ├── routes.ts        # API route definitions\n│   ├── storage.ts       # Data storage interface\n│   └── vite.ts          # Vite development setup\n└── shared/              # Shared types and schemas\n    └── schema.ts        # Zod schemas and TypeScript types\n```\n\n## Data Models\n\n### Core Entities\n- **Exercise**: Individual exercise with sets, reps, load, rest\n- **Day**: Collection of exercises for a training day\n- **Week**: Collection of days with a week number\n- **Workout**: Complete workout plan with multiple weeks\n- **Client**: Client profile information\n- **CoachProfile**: Coach information and branding\n\n### Validation\nAll data validation uses Zod schemas defined in `shared/schema.ts` with automatic TypeScript type inference.\n\n## Development\n\n### Commands\n- `npm run dev`: Start development server (Express + Vite)\n- `npm run build`: Build for production\n- `npm run start`: Start production server\n- `npm run check`: TypeScript type checking\n\n### Environment\n- Development server runs on port 5000\n- Frontend and backend served from same port in development\n- Hot reloading enabled for both frontend and backend\n\n## Security & Best Practices\n\n- Client/server separation with clear API boundaries\n- Input validation using Zod schemas\n- Type-safe development with TypeScript\n- CORS and security headers configured\n- Environment-based configuration\n\n## Recent Changes\n\n**Enhanced User Interface** (August 6, 2025)\n- Created comprehensive main menu with navigation cards\n- Added workout deletion functionality with confirmation dialogs\n- Enhanced PDF export with coach profile branding\n- Implemented image upload for exercises\n- All menu buttons properly linked to respective pages\n- Added floating action button for quick workout creation\n\n**Migration from Replit Agent** (August 7, 2025) \n- Successfully migrated project to Replit environment\n- Fixed server configuration for Replit compatibility (host: 0.0.0.0)\n- Resolved dependency issues and reinstalled all packages\n- Verified all dependencies are properly installed\n- Confirmed server starts correctly on port 5000\n- All core functionality working as expected\n\n**Enhanced Workout Management** (August 6, 2025)\n- Added nome scheda (workout name) field for better identification\n- Implemented client selection from existing clients database\n- Enhanced workout cards to display workout names prominently  \n- Improved light mode visibility with better contrast and colors\n- Updated glass-effect styling for better readability in day mode\n\n**Advanced PDF Customization System** (August 7, 2025)\n- Fixed optional email fields validation (truly optional now)\n- Added customizable line color selector for PDF exports\n- **NEW**: Added customizable text color for PDF section titles\n- Implemented removable \"Generato con FitTracker Pro\" watermark\n- Enhanced settings page with comprehensive PDF personalization section\n- Updated coach profile schema with pdfLineColor, pdfTextColor and showWatermark fields\n- PDF section titles now use customizable colors: \"DESCRIZIONE\", \"PROGRESSIONE SETTIMANALE\", \"CONSIGLI DIETISTICI\", \"SCHEDA DI ALLENAMENTO\"\n- Day names in weekly progression also use the custom text color\n- Removed large watermark, kept only small footer text controllable via settings\n- Changed watermark text from \"FitTracker Pro\" to \"EasyWorkout Planner\"\n\n**UI Improvements** (August 7, 2025)\n- Increased navbar height for better usability (added py-3 class)\n- Better visual hierarchy in mobile navigation\n\n**Final PDF Text Color Implementation** (August 7, 2025)\n- Completed implementation of customizable PDF text colors for all section titles\n- Added \"Colore Titoli PDF\" field in settings with color picker and text input\n- Updated PDF generator to use pdfTextColor from coach profile for all titles\n- Enhanced day names in weekly progression to use custom text color\n- Full customization now available: line colors, text colors, and watermark toggle\n\n**Desktop Responsive Layout** (August 7, 2025)\n- Added desktop navigation menu in top header (hidden on mobile)\n- Enhanced all page headers with improved typography and spacing\n- Implemented responsive layout adaptations for larger screen sizes\n- Added desktop-specific button sizing and improved visual hierarchy\n- Updated grid layouts to better utilize desktop screen space\n- Enhanced glass effects and backdrop blur for desktop viewing\n- Improved navbar height for better mobile usability\n- All pages now fully responsive for desktop browser windows\n\n**UI Improvements & Schema Updates** (August 7, 2025)\n- Removed \"EasyWorkout\" and \"Schede Allenamento\" titles from NavBar as requested\n- Removed mandatory Coach field from workout forms (now taken from Settings)\n- Added optional Level field with options: Neofita, Principiante, Intermedio, Avanzato\n- Updated workout schema to accommodate new level field and optional coach field\n- Enhanced form layout to accommodate 3-column grid (Type, Level, Duration)\n- Fixed SelectItem bug with empty value prop\n- Removed circular + button from workout builder header\n- Changed all references from \"FitTracker Pro\" to \"EasyWorkout Planner\"\n- Removed floating action button (circular + button) from home page\n- Hidden statistics cards on mobile (Schede Attive, Clienti Totali, PDF Esportati)\n- Removed glass effects from navbar on mobile for solid background\n- Hidden \"Progressione Settimanale\" title on mobile in workout builder\n\n**Enhanced PDF Customization & Weekly Management** (August 18, 2025)\n- Added customizable week names (default \"SETTIMANA 1\", etc.)\n- Logo now positioned above the title in PDF headers\n- Added flag to use workout name as title instead of \"SCHEDA DI ALLENAMENTO\"\n- Coach biography now displays under coach name in PDF exports\n- Updated weekSchema to include optional name field for custom week naming\n- Enhanced ExerciseForm component with editable week names\n- Added useWorkoutNameAsTitle setting in coach profile\n- Improved PDF header layout with centered logo positioning\n- Week names in workout builder now fully customizable by users\n\n**Mobile Optimization & UI Improvements** (August 18, 2025)\n- Added auto-refresh functionality after profile save for immediate visual feedback\n- Implemented mobile-responsive workout detail view with stacked layout\n- Created separate mobile card view for exercises (replaces overlapping table)\n- Enhanced mobile header with centered layout and full-width buttons\n- Removed \"Installa l'App\" section as requested by user\n- Optimized exercise display with grid layout for Serie/Reps/Carico/Recupero on mobile\n- Added proper spacing and typography for mobile viewing experience\n\n## User Preferences\n\n- Language: Italian (UI text in Italian)\n- Professional fitness coaching application\n- Mobile-responsive design priority","size_bytes":9059},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 80 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '3000', 10);\n\nserver.listen({\n  port,\n  host: \"0.0.0.0\", // Use 0.0.0.0 for Replit compatibility\n}, () => {\n  log(`Server running on port ${port}`);\n  log(`Environment PORT: ${process.env.PORT || 'not set'}`);\n});\n\n})();\n","size_bytes":2141},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertWorkoutSchema, \n  insertClientSchema, \n  insertCoachProfileSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Workout routes\n  app.get(\"/api/workouts\", async (req, res) => {\n    try {\n      const workouts = await storage.getAllWorkouts();\n      res.json(workouts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workouts\" });\n    }\n  });\n\n  app.get(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const workout = await storage.getWorkout(req.params.id);\n      if (!workout) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      res.json(workout);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workout\" });\n    }\n  });\n\n  app.post(\"/api/workouts\", async (req, res) => {\n    try {\n      const validatedData = insertWorkoutSchema.parse(req.body);\n      const workout = await storage.createWorkout(validatedData);\n      res.status(201).json(workout);\n    } catch (error) {\n      if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: \"Failed to create workout\" });\n    }\n  });\n\n  app.put(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const validatedData = insertWorkoutSchema.partial().parse(req.body);\n      const workout = await storage.updateWorkout(req.params.id, validatedData);\n      if (!workout) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      res.json(workout);\n    } catch (error) {\n      if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: \"Failed to update workout\" });\n    }\n  });\n\n  app.delete(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteWorkout(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Workout not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete workout\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, validatedData);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteClient(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Coach profile routes\n  app.get(\"/api/coach-profile\", async (req, res) => {\n    try {\n      const profile = await storage.getDefaultCoachProfile();\n      if (!profile) {\n        return res.status(404).json({ message: \"Coach profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch coach profile\" });\n    }\n  });\n\n  app.get(\"/api/coach-profile/:id\", async (req, res) => {\n    try {\n      const profile = await storage.getCoachProfile(req.params.id);\n      if (!profile) {\n        return res.status(404).json({ message: \"Coach profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch coach profile\" });\n    }\n  });\n\n  app.post(\"/api/coach-profile\", async (req, res) => {\n    try {\n      const validatedData = insertCoachProfileSchema.parse(req.body);\n      const profile = await storage.createCoachProfile(validatedData);\n      res.status(201).json(profile);\n    } catch (error) {\n      if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: \"Failed to create coach profile\" });\n    }\n  });\n\n  app.put(\"/api/coach-profile/:id\", async (req, res) => {\n    try {\n      const validatedData = insertCoachProfileSchema.partial().parse(req.body);\n      const profile = await storage.updateCoachProfile(req.params.id, validatedData);\n      if (!profile) {\n        return res.status(404).json({ message: \"Coach profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      if (error && typeof error === 'object' && 'name' in error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: \"Failed to update coach profile\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":6614},"server/storage.ts":{"content":"import { \n  type Workout, \n  type InsertWorkout,\n  type Client,\n  type InsertClient,\n  type CoachProfile,\n  type InsertCoachProfile\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for fitness coach application\nexport interface IStorage {\n  // Workout operations\n  getWorkout(id: string): Promise<Workout | undefined>;\n  getAllWorkouts(): Promise<Workout[]>;\n  createWorkout(workout: InsertWorkout): Promise<Workout>;\n  updateWorkout(id: string, workout: Partial<InsertWorkout>): Promise<Workout | undefined>;\n  deleteWorkout(id: string): Promise<boolean>;\n  \n  // Client operations\n  getClient(id: string): Promise<Client | undefined>;\n  getAllClients(): Promise<Client[]>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n  \n  // Coach profile operations\n  getCoachProfile(id: string): Promise<CoachProfile | undefined>;\n  getDefaultCoachProfile(): Promise<CoachProfile | undefined>;\n  createCoachProfile(profile: InsertCoachProfile): Promise<CoachProfile>;\n  updateCoachProfile(id: string, profile: Partial<InsertCoachProfile>): Promise<CoachProfile | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private workouts: Map<string, Workout>;\n  private clients: Map<string, Client>;\n  private coachProfiles: Map<string, CoachProfile>;\n\n  constructor() {\n    this.workouts = new Map();\n    this.clients = new Map();\n    this.coachProfiles = new Map();\n  }\n\n  // Workout operations\n  async getWorkout(id: string): Promise<Workout | undefined> {\n    return this.workouts.get(id);\n  }\n\n  async getAllWorkouts(): Promise<Workout[]> {\n    return Array.from(this.workouts.values());\n  }\n\n  async createWorkout(insertWorkout: InsertWorkout): Promise<Workout> {\n    const id = randomUUID();\n    const now = new Date();\n    const workout: Workout = { \n      ...insertWorkout, \n      id, \n      createdAt: now,\n      updatedAt: now\n    };\n    this.workouts.set(id, workout);\n    return workout;\n  }\n\n  async updateWorkout(id: string, updateData: Partial<InsertWorkout>): Promise<Workout | undefined> {\n    const existing = this.workouts.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Workout = {\n      ...existing,\n      ...updateData,\n      id,\n      updatedAt: new Date()\n    };\n    this.workouts.set(id, updated);\n    return updated;\n  }\n\n  async deleteWorkout(id: string): Promise<boolean> {\n    return this.workouts.delete(id);\n  }\n\n  // Client operations\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async getAllClients(): Promise<Client[]> {\n    return Array.from(this.clients.values());\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = randomUUID();\n    const client: Client = { \n      ...insertClient, \n      id, \n      createdAt: new Date()\n    };\n    this.clients.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: string, updateData: Partial<InsertClient>): Promise<Client | undefined> {\n    const existing = this.clients.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Client = {\n      ...existing,\n      ...updateData,\n      id\n    };\n    this.clients.set(id, updated);\n    return updated;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    return this.clients.delete(id);\n  }\n\n  // Coach profile operations\n  async getCoachProfile(id: string): Promise<CoachProfile | undefined> {\n    return this.coachProfiles.get(id);\n  }\n\n  async getDefaultCoachProfile(): Promise<CoachProfile | undefined> {\n    // Restituisce il primo profilo coach disponibile o undefined\n    const profiles = Array.from(this.coachProfiles.values());\n    return profiles.length > 0 ? profiles[0] : undefined;\n  }\n\n  async createCoachProfile(insertProfile: InsertCoachProfile): Promise<CoachProfile> {\n    const id = randomUUID();\n    const profile: CoachProfile = { ...insertProfile, id };\n    this.coachProfiles.set(id, profile);\n    return profile;\n  }\n\n  async updateCoachProfile(id: string, updateData: Partial<InsertCoachProfile>): Promise<CoachProfile | undefined> {\n    const existing = this.coachProfiles.get(id);\n    if (!existing) return undefined;\n    \n    const updated: CoachProfile = {\n      ...existing,\n      ...updateData,\n      id\n    };\n    this.coachProfiles.set(id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4496},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Exercise schema\nexport const exerciseSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Nome esercizio richiesto\"),\n  sets: z.string().min(1, \"Serie richieste\"),\n  reps: z.string().min(1, \"Ripetizioni richieste\"),\n  load: z.string().optional(),\n  rest: z.string().optional(), // Tempo di recupero\n  notes: z.string().optional(),\n  imageUrl: z.string().optional(),\n  order: z.number().default(0)\n});\n\n// Day schema for organizing exercises by training day\nexport const daySchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Nome giorno richiesto\"), // es. \"Giorno 1 - Petto e Tricipiti\"\n  exercises: z.array(exerciseSchema),\n  notes: z.string().optional()\n});\n\n// Week schema with multiple days\nexport const weekSchema = z.object({\n  id: z.string(),\n  number: z.number().min(1),\n  name: z.string().optional(), // Nome customizzabile della settimana\n  days: z.array(daySchema), // Changed from exercises to days\n  notes: z.string().optional()\n});\n\n// Workout schema\nexport const workoutSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Nome scheda richiesto\"), // Nome identificativo della scheda\n  coachName: z.string().optional(), // Coach preso dalle impostazioni, non più richiesto\n  clientName: z.string().min(1, \"Nome cliente richiesto\"),\n  clientId: z.string().optional(), // ID del cliente selezionato dalla lista\n  workoutType: z.string().min(1, \"Tipo scheda richiesto\"),\n  level: z.enum([\"Neofita\", \"Principiante\", \"Intermedio\", \"Avanzato\"]).optional(), // Nuovo campo livello\n  duration: z.number().min(1, \"Durata richiesta\"),\n  description: z.string().optional(),\n  dietaryAdvice: z.string().optional(),\n  weeks: z.array(weekSchema),\n  createdAt: z.date(),\n  updatedAt: z.date()\n});\n\n// Client schema\nexport const clientSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Nome cliente richiesto\"),\n  email: z.string().email().or(z.literal(\"\")).optional(),\n  phone: z.string().optional(),\n  notes: z.string().optional(),\n  createdAt: z.date()\n});\n\n// Coach profile schema\nexport const coachProfileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Nome coach richiesto\"),\n  email: z.string().email().or(z.literal(\"\")).optional(),\n  phone: z.string().optional(),\n  bio: z.string().optional(),\n  logo: z.string().optional(),\n  instagram: z.string().optional(),\n  facebook: z.string().optional(),\n  website: z.string().optional(),\n  exportPath: z.string().optional(), // Default export path for PDFs\n  // Impostazioni PDF personalizzabili\n  pdfLineColor: z.string().optional().default(\"#000000\"), // Colore delle linee nei PDF\n  pdfTextColor: z.string().optional().default(\"#4F46E5\"), // Colore dei titoli delle sezioni nei PDF\n  showWatermark: z.boolean().optional().default(true), // Se mostrare la filigrana\n  useWorkoutNameAsTitle: z.boolean().optional().default(false) // Se usare il nome scheda al posto di \"SCHEDA DI ALLENAMENTO\"\n});\n\n// Insert schemas\nexport const insertExerciseSchema = exerciseSchema.omit({ id: true });\nexport const insertDaySchema = daySchema.omit({ id: true });\nexport const insertWeekSchema = weekSchema.omit({ id: true });\nexport const insertWorkoutSchema = workoutSchema.omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertClientSchema = clientSchema.omit({ id: true, createdAt: true });\nexport const insertCoachProfileSchema = coachProfileSchema.omit({ id: true });\n\n// Types\nexport type Exercise = z.infer<typeof exerciseSchema>;\nexport type Day = z.infer<typeof daySchema>;\nexport type Week = z.infer<typeof weekSchema>;\nexport type Workout = z.infer<typeof workoutSchema>;\nexport type Client = z.infer<typeof clientSchema>;\nexport type CoachProfile = z.infer<typeof coachProfileSchema>;\n\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\nexport type InsertDay = z.infer<typeof insertDaySchema>;\nexport type InsertWeek = z.infer<typeof insertWeekSchema>;\nexport type InsertWorkout = z.infer<typeof insertWorkoutSchema>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type InsertCoachProfile = z.infer<typeof insertCoachProfileSchema>;\n\n// Workout types\nexport const workoutTypes = [\n  \"Forza e Massa\",\n  \"Definizione\", \n  \"Resistenza\",\n  \"Riabilitazione\",\n  \"Funzionale\"\n] as const;\n\nexport type WorkoutType = typeof workoutTypes[number];\n\n// Levels types\nexport const levels = [\n  \"Neofita\",\n  \"Principiante\", \n  \"Intermedio\",\n  \"Avanzato\"\n] as const;\n\nexport type Level = typeof levels[number];\n\n// PDF Settings schema per le impostazioni di esportazione\nexport const pdfSettingsSchema = z.object({\n  lineColor: z.string().default(\"#000000\"),\n  showWatermark: z.boolean().default(true),\n  headerStyle: z.enum([\"minimal\", \"standard\", \"detailed\"]).default(\"standard\"),\n  fontSize: z.enum([\"small\", \"medium\", \"large\"]).default(\"medium\")\n});\n\nexport type PDFSettings = z.infer<typeof pdfSettingsSchema>;\n","size_bytes":4904},"client/public/sw.js":{"content":"const CACHE_NAME = 'fittracker-pro-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json',\n  '/icons/icon-192.png',\n  '/icons/icon-512.png'\n];\n\n// Install event\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      })\n  );\n});\n\n// Activate event\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n","size_bytes":1110},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Navigation } from \"@/components/navigation\";\nimport { BottomNav } from \"@/components/bottom-nav\";\nimport Home from \"@/pages/home\";\nimport Workouts from \"@/pages/workouts\";\nimport WorkoutDetail from \"@/pages/workout-detail\";\nimport Clients from \"@/pages/clients\";\nimport Settings from \"@/pages/settings\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport NotFound from \"@/pages/not-found\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/workouts\" component={Workouts} />\n      <Route path=\"/workout/:id\" component={WorkoutDetail} />\n      <Route path=\"/clients\" component={Clients} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/reset-password\" component={ResetPassword} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AuthProvider>\n            <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-indigo-900 transition-all duration-500\">\n              <Navigation />\n              <main className=\"pb-20 md:pb-6\">\n                <Router />\n              </main>\n              <BottomNav />\n              <Toaster />\n            </div>\n          </AuthProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1870},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 96%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(210, 15%, 92%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 98%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 98%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(210, 15%, 85%);\n  --input: hsl(210, 15%, 90%);\n  --primary: hsl(238, 85%, 65%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 15%, 92%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(210, 15%, 92%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom colors for the fitness app */\n  --indigo-50: hsl(238, 100%, 98%);\n  --indigo-500: hsl(238, 85%, 65%);\n  --indigo-600: hsl(238, 85%, 60%);\n  --indigo-700: hsl(238, 85%, 55%);\n  --purple-50: hsl(270, 100%, 98%);\n  --purple-500: hsl(270, 91%, 65%);\n  --purple-600: hsl(270, 91%, 60%);\n  --emerald-400: hsl(158, 68%, 52%);\n  --emerald-500: hsl(158, 64%, 52%);\n  --emerald-600: hsl(158, 64%, 47%);\n  --teal-500: hsl(174, 72%, 56%);\n  --teal-600: hsl(174, 72%, 51%);\n  --orange-500: hsl(25, 95%, 53%);\n  --orange-600: hsl(25, 95%, 48%);\n  --red-500: hsl(0, 72%, 51%);\n  --red-600: hsl(0, 72%, 46%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(238, 85%, 65%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.7);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n  }\n  \n  .dark .glass-effect {\n    background: rgba(0, 0, 0, 0.2);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-pulse-soft {\n    animation: pulseSoft 2s ease-in-out infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(100%); \n  }\n  to { \n    transform: translateY(0); \n  }\n}\n\n@keyframes pulseSoft {\n  0%, 100% { \n    transform: scale(1); \n  }\n  50% { \n    transform: scale(1.05); \n  }\n}\n\n/* Custom gradients */\n.bg-gradient-primary {\n  background: linear-gradient(135deg, hsl(238, 85%, 65%), hsl(270, 91%, 65%));\n}\n\n.bg-gradient-secondary {\n  background: linear-gradient(135deg, hsl(158, 64%, 52%), hsl(174, 72%, 56%));\n}\n\n.bg-gradient-accent {\n  background: linear-gradient(135deg, hsl(25, 95%, 53%), hsl(0, 72%, 51%));\n}\n\n/* Mobile bottom navigation padding */\n.pb-mobile-nav {\n  padding-bottom: 5rem;\n}\n\n@media (min-width: 768px) {\n  .pb-mobile-nav {\n    padding-bottom: 1.5rem;\n  }\n}\n\n/* Desktop responsive improvements */\n@media (min-width: 1024px) {\n  .max-w-7xl {\n    max-width: 90rem;\n  }\n}\n\n/* Better glass effect for larger screens */\n@media (min-width: 768px) {\n  .glass-effect {\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n  }\n}\n","size_bytes":4015},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/account-dialog.tsx":{"content":"import { useEffect, useMemo, useState } from 'react';\nimport {\n\tDialog,\n\tDialogTrigger,\n\tDialogContent,\n\tDialogHeader,\n\tDialogTitle,\n\tDialogDescription,\n\tDialogFooter\n} from './ui/dialog';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label'; // Aggiunta questa importazione\nimport { Button } from './ui/button';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/lib/supabase';\n\nexport function AccountDialog({ trigger }: { trigger: React.ReactNode }) {\n\tconst { user } = useAuth();\n\tconst { toast } = useToast();\n\tconst [open, setOpen] = useState(false);\n\tconst initialName = useMemo(() => (user?.user_metadata?.name as string) || '', [user]);\n\tconst initialEmail = user?.email || '';\n\n\tconst [name, setName] = useState(initialName);\n\tconst [email, setEmail] = useState(initialEmail);\n\tconst [saving, setSaving] = useState(false);\n\tconst [changingEmail, setChangingEmail] = useState(false);\n\t// Aggiungi questi stati\n\tconst [changingPassword, setChangingPassword] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (open) {\n\t\t\tsetName(initialName);\n\t\t\tsetEmail(initialEmail);\n\t\t}\n\t}, [open, initialName, initialEmail]);\n\n\tconst onSaveProfile = async (e: React.FormEvent) => {\n\t\te.preventDefault();\n\t\tif (!user) return;\n\t\tsetSaving(true);\n\t\ttry {\n\t\t\t// aggiorna solo il nome\n\t\t\tif (name !== initialName) {\n\t\t\t\tconst { error } = await supabase.auth.updateUser({ data: { name } });\n\t\t\t\tif (error) throw error;\n\t\t\t}\n\t\t\ttoast({ title: 'Profilo aggiornato', description: 'Le modifiche sono state salvate.' });\n\t\t\tsetOpen(false);\n\t\t} catch (err: any) {\n\t\t\ttoast({ \n\t\t\t\ttitle: 'Errore aggiornamento', \n\t\t\t\tdescription: err?.message || 'Impossibile aggiornare il profilo', \n\t\t\t\tvariant: 'destructive' \n\t\t\t});\n\t\t} finally {\n\t\t\tsetSaving(false);\n\t\t}\n\t};\n\n\tconst onChangeEmail = async (e: React.FormEvent) => {\n\t\te.preventDefault();\n\t\tif (!email || email === initialEmail) return;\n\t\t\n\t\tsetChangingEmail(true);\n\t\ttry {\n\t\t\tconst { error } = await supabase.auth.updateUser(\n\t\t\t\t{ email },\n\t\t\t\t{ emailRedirectTo: `${window.location.origin}` }\n\t\t\t);\n\t\t\t\n\t\t\tif (error) throw error;\n\t\t\t\n\t\t\ttoast({ \n\t\t\t\ttitle: 'Email di verifica inviata', \n\t\t\t\tdescription: 'Controlla la tua email per confermare il cambio.' \n\t\t\t});\n\t\t\t\n\t\t\tsetOpen(false);\n\t\t} catch (err: any) {\n\t\t\ttoast({ \n\t\t\t\ttitle: 'Errore', \n\t\t\t\tdescription: err?.message || 'Impossibile aggiornare email', \n\t\t\t\tvariant: 'destructive' \n\t\t\t});\n\t\t} finally {\n\t\t\tsetChangingEmail(false);\n\t\t}\n\t};\n\n\t// Aggiungi questa funzione\n\tconst onChangePassword = async (e: React.FormEvent) => {\n\t\te.preventDefault();\n\t\tif (!user?.email) return;\n\t\t\n\t\tsetChangingPassword(true);\n\t\ttry {\n\t\t\tconst { error } = await supabase.auth.resetPasswordForEmail(user.email, {\n\t\t\t\tredirectTo: `${window.location.origin}/reset-password`\n\t\t\t});\n\t\t\t\n\t\t\tif (error) throw error;\n\t\t\t\n\t\t\ttoast({ \n\t\t\t\ttitle: 'Email inviata', \n\t\t\t\tdescription: 'Controlla la tua email per reimpostare la password.' \n\t\t\t});\n\t\t\t\n\t\t\tsetOpen(false);\n\t\t} catch (err: any) {\n\t\t\ttoast({ \n\t\t\t\ttitle: 'Errore', \n\t\t\t\tdescription: err?.message || 'Impossibile inviare email di reset', \n\t\t\t\tvariant: 'destructive' \n\t\t\t});\n\t\t} finally {\n\t\t\tsetChangingPassword(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Dialog open={open} onOpenChange={setOpen}>\n\t\t\t<DialogTrigger asChild>{trigger}</DialogTrigger>\n\t\t\t<DialogContent>\n\t\t\t\t<DialogHeader>\n\t\t\t\t\t<DialogTitle>Il tuo profilo</DialogTitle>\n\t\t\t\t\t<DialogDescription>\n\t\t\t\t\t\tGestisci le tue informazioni personali\n\t\t\t\t\t</DialogDescription>\n\t\t\t\t</DialogHeader>\n\n\t\t\t\t<form onSubmit={onSaveProfile} className=\"space-y-4\">\n\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t<Label htmlFor=\"name\">Nome</Label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<DialogFooter>\n\t\t\t\t\t\t<Button type=\"submit\" disabled={saving}>\n\t\t\t\t\t\t\t{saving ? 'Salvataggio...' : 'Salva'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</DialogFooter>\n\t\t\t\t</form>\n\n\t\t\t\t<hr className=\"my-4 border-gray-200 dark:border-gray-800\" />\n\n\t\t\t\t<form onSubmit={onChangeEmail} className=\"space-y-4\">\n\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t<Label htmlFor=\"email\">Email</Label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p className=\"text-sm text-gray-500\">\n\t\t\t\t\t\t\tRiceverai un'email di verifica per confermare il cambio.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<DialogFooter>\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\ttype=\"submit\" \n\t\t\t\t\t\t\tvariant=\"secondary\" \n\t\t\t\t\t\t\tdisabled={changingEmail || email === initialEmail}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{changingEmail ? 'Invio email...' : 'Cambia email'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</DialogFooter>\n\t\t\t\t</form>\n\n\t\t\t\t<hr className=\"my-4 border-gray-200 dark:border-gray-800\" />\n\t\t\t\t\n\t\t\t\t<form onSubmit={onChangePassword} className=\"space-y-3\">\n\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\tRiceverai un'email con le istruzioni per reimpostare la password.\n\t\t\t\t\t</p>\n\t\t\t\t\t<DialogFooter>\n\t\t\t\t\t\t<Button type=\"submit\" variant=\"secondary\" disabled={changingPassword}>\n\t\t\t\t\t\t\t{changingPassword ? 'Invio email...' : 'Reimposta password'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</DialogFooter>\n\t\t\t\t</form>\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t);\n}\n","size_bytes":5198},"client/src/components/bottom-nav.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Home, Dumbbell, Users, Settings } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst navItems = [\n  { path: '/', icon: Home, label: 'Home' },\n  { path: '/workouts', icon: Dumbbell, label: 'Schede' },\n  { path: '/clients', icon: Users, label: 'Clienti' },\n  { path: '/settings', icon: Settings, label: 'Impostazioni' },\n];\n\nexport function BottomNav() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 md:hidden z-30 py-3\">\n      <div className=\"flex items-center justify-around py-2\">\n        {navItems.map(({ path, icon: Icon, label }) => {\n          const isActive = location === path;\n          return (\n            <Link key={path} href={path}>\n              <button\n                className={cn(\n                  \"flex flex-col items-center py-2 px-4 transition-colors\",\n                  isActive \n                    ? \"text-indigo-500\" \n                    : \"text-gray-500 dark:text-gray-400\"\n                )}\n              >\n                <Icon size={20} className=\"mb-1\" />\n                <span className=\"text-xs\">{label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1334},"client/src/components/exercise-form.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Plus, Minus, Edit, Trash2, Image, Calendar } from 'lucide-react';\nimport { processImageForUpload } from '@/lib/image-utils';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Week, Exercise, Day } from '@shared/schema';\n\ninterface ExerciseFormProps {\n  week: Week;\n  onUpdateWeek: (week: Week) => void;\n  onRemoveWeek: () => void;\n}\n\nexport function ExerciseForm({ week, onUpdateWeek, onRemoveWeek }: ExerciseFormProps) {\n  const [localWeek, setLocalWeek] = useState<Week>({\n    ...week,\n    days: week.days || []\n  });\n  const { toast } = useToast();\n\n  const addDay = () => {\n    const newDay: Day = {\n      id: crypto.randomUUID(),\n      name: `Giorno ${(localWeek.days || []).length + 1}`,\n      exercises: []\n    };\n    const updated = { ...localWeek, days: [...(localWeek.days || []), newDay] };\n    setLocalWeek(updated);\n    onUpdateWeek(updated);\n  };\n\n  const updateDay = (dayId: string, field: keyof Day, value: string | Exercise[]) => {\n    const updated = {\n      ...localWeek,\n      days: (localWeek.days || []).map(day =>\n        day.id === dayId ? { ...day, [field]: value } : day\n      )\n    };\n    setLocalWeek(updated);\n    onUpdateWeek(updated);\n  };\n\n  const removeDay = (dayId: string) => {\n    const updated = {\n      ...localWeek,\n      days: (localWeek.days || []).filter(day => day.id !== dayId)\n    };\n    setLocalWeek(updated);\n    onUpdateWeek(updated);\n  };\n\n  const addExercise = (dayId: string) => {\n    const newExercise: Exercise = {\n      id: crypto.randomUUID(),\n      name: '',\n      sets: '',\n      reps: '',\n      load: '',\n      rest: '',\n      notes: '',\n      order: 0\n    };\n    \n    const day = (localWeek.days || []).find(d => d.id === dayId);\n    if (day) {\n      const updatedExercises = [...(day.exercises || []), { ...newExercise, order: (day.exercises || []).length }];\n      updateDay(dayId, 'exercises', updatedExercises);\n    }\n  };\n\n  const updateExercise = (dayId: string, exerciseId: string, field: keyof Exercise, value: string) => {\n    const day = (localWeek.days || []).find(d => d.id === dayId);\n    if (day) {\n      const updatedExercises = (day.exercises || []).map(exercise =>\n        exercise.id === exerciseId ? { ...exercise, [field]: value } : exercise\n      );\n      updateDay(dayId, 'exercises', updatedExercises);\n    }\n  };\n\n  const removeExercise = (dayId: string, exerciseId: string) => {\n    const day = (localWeek.days || []).find(d => d.id === dayId);\n    if (day) {\n      const updatedExercises = (day.exercises || []).filter(exercise => exercise.id !== exerciseId);\n      updateDay(dayId, 'exercises', updatedExercises);\n    }\n  };\n\n  const handleImageUpload = async (dayId: string, exerciseId: string, file: File) => {\n    try {\n      const compressedDataUrl = await processImageForUpload(file, 800, 600);\n      updateExercise(dayId, exerciseId, 'imageUrl', compressedDataUrl);\n      \n      toast({\n        title: \"Immagine caricata\",\n        description: \"L'immagine è stata aggiunta all'esercizio\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: error instanceof Error ? error.message : \"Impossibile caricare l'immagine\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"border border-gray-200 dark:border-gray-600 rounded-xl p-4 bg-white/30 dark:bg-gray-800/30 animate-slide-up\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <Input\n          value={localWeek.name || `SETTIMANA ${localWeek.number}`}\n          onChange={(e) => {\n            const updated = { ...localWeek, name: e.target.value };\n            setLocalWeek(updated);\n            onUpdateWeek(updated);\n          }}\n          className=\"font-medium bg-transparent border-none p-0 text-lg text-gray-900 dark:text-white focus:bg-white/50 dark:focus:bg-gray-800/50 w-auto max-w-xs\"\n          placeholder={`SETTIMANA ${localWeek.number}`}\n        />\n        <div className=\"flex space-x-2\">\n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={addDay}\n            className=\"p-1 text-emerald-500 hover:bg-emerald-50 dark:hover:bg-emerald-900/20\"\n          >\n            <Calendar size={14} />\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={onRemoveWeek}\n            className=\"p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20\"\n          >\n            <Trash2 size={14} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Week notes */}\n      <div className=\"mb-4\">\n        <Textarea\n          placeholder=\"Note per la settimana...\"\n          value={localWeek.notes || ''}\n          onChange={(e) => {\n            const updated = { ...localWeek, notes: e.target.value };\n            setLocalWeek(updated);\n            onUpdateWeek(updated);\n          }}\n          rows={2}\n          className=\"text-sm bg-white/50 dark:bg-gray-800/50\"\n        />\n      </div>\n\n      {/* Days */}\n      <div className=\"space-y-12\">\n        {(localWeek.days || []).map((day, dayIndex) => (\n          <div key={day.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-white/40 dark:bg-gray-900/20\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <Input\n                value={day.name}\n                onChange={(e) => updateDay(day.id, 'name', e.target.value)}\n                className=\"font-medium bg-transparent border-none p-0 text-sm text-gray-900 dark:text-white focus:bg-white/50 dark:focus:bg-gray-800/50\"\n                placeholder=\"Nome del giorno\"\n              />\n              <div className=\"flex space-x-1\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => addExercise(day.id)}\n                  className=\"p-1 text-indigo-500 hover:bg-indigo-50 dark:hover:bg-indigo-900/20\"\n                >\n                  <Plus size={12} />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => removeDay(day.id)}\n                  className=\"p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                >\n                  <Trash2 size={12} />\n                </Button>\n              </div>\n            </div>\n\n            {/* Day notes */}\n            {day.notes !== undefined && (\n              <Textarea\n                placeholder=\"Note per il giorno...\"\n                value={day.notes || ''}\n                onChange={(e) => updateDay(day.id, 'notes', e.target.value)}\n                rows={2}\n                className=\"text-xs bg-white/30 dark:bg-gray-800/30 mb-3\"\n              />\n            )}\n\n            {/* Exercises for this day */}\n            <div className=\"space-y-2\">\n              {(day.exercises || []).map((exercise) => (\n                <div \n                  key={exercise.id} \n                  className=\"flex items-start space-x-2 p-2 bg-white/40 dark:bg-gray-700/40 rounded-lg animate-fade-in\"\n                >\n                  {/* Image upload */}\n                  <div className=\"relative flex-shrink-0\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) {\n                          handleImageUpload(day.id, exercise.id, file);\n                        }\n                      }}\n                      className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                    />\n                    <div className=\"w-10 h-10 bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-600 dark:to-gray-700 rounded-lg flex items-center justify-center cursor-pointer hover:opacity-75 transition-opacity\">\n                      {exercise.imageUrl ? (\n                        <img \n                          src={exercise.imageUrl} \n                          alt=\"Exercise\" \n                          className=\"w-full h-full object-cover rounded-lg\"\n                        />\n                      ) : (\n                        <Image className=\"text-gray-500 dark:text-gray-400\" size={12} />\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Exercise fields */}\n                  <div className=\"flex-1 grid grid-cols-2 md:grid-cols-5 gap-1\">\n                    <Input\n                      placeholder=\"Esercizio\"\n                      value={exercise.name}\n                      onChange={(e) => updateExercise(day.id, exercise.id, 'name', e.target.value)}\n                      className=\"text-xs bg-white/50 dark:bg-gray-800/50 col-span-2 md:col-span-1\"\n                    />\n                    <Input\n                      placeholder=\"Serie\"\n                      value={exercise.sets}\n                      onChange={(e) => updateExercise(day.id, exercise.id, 'sets', e.target.value)}\n                      className=\"text-xs bg-white/50 dark:bg-gray-800/50\"\n                    />\n                    <Input\n                      placeholder=\"Reps\"\n                      value={exercise.reps}\n                      onChange={(e) => updateExercise(day.id, exercise.id, 'reps', e.target.value)}\n                      className=\"text-xs bg-white/50 dark:bg-gray-800/50\"\n                    />\n                    <Input\n                      placeholder=\"Carico\"\n                      value={exercise.load || ''}\n                      onChange={(e) => updateExercise(day.id, exercise.id, 'load', e.target.value)}\n                      className=\"text-xs bg-white/50 dark:bg-gray-800/50\"\n                    />\n                    <Input\n                      placeholder=\"Recupero\"\n                      value={exercise.rest || ''}\n                      onChange={(e) => updateExercise(day.id, exercise.id, 'rest', e.target.value)}\n                      className=\"text-xs bg-white/50 dark:bg-gray-800/50\"\n                    />\n                  </div>\n\n                  <Button \n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => removeExercise(day.id, exercise.id)}\n                    className=\"p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 flex-shrink-0\"\n                  >\n                    <Minus size={12} />\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {/* Add exercise to day button */}\n            <Button \n              type=\"button\"\n              onClick={() => addExercise(day.id)}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"mt-2 w-full py-1 text-xs text-indigo-500 border border-dashed border-indigo-300 dark:border-indigo-600 hover:bg-indigo-50 dark:hover:bg-indigo-900/20 transition-colors\"\n            >\n              <Plus className=\"mr-1\" size={12} />\n              Aggiungi Esercizio\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      {/* Add day button */}\n      <Button \n        type=\"button\"\n        onClick={addDay}\n        variant=\"outline\"\n        className=\"mt-4 w-full py-2 text-emerald-500 border-2 border-dashed border-emerald-300 dark:border-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 transition-colors\"\n      >\n        <Calendar className=\"mr-2\" size={16} />\n        Aggiungi Giorno\n      </Button>\n    </div>\n  );\n}\n","size_bytes":11642},"client/src/components/login-dialog.tsx":{"content":"import { useState } from 'react';\nimport {\n\tDialog,\n\tDialogTrigger,\n\tDialogContent,\n\tDialogHeader,\n\tDialogTitle,\n\tDialogDescription,\n\tDialogFooter,\n\tDialogClose\n} from './ui/dialog';\nimport { Input } from './ui/input';\nimport { Button } from './ui/button';\nimport { supabase } from '../lib/supabase';\n\nexport function LoginDialog({ trigger }: { trigger: React.ReactNode }) {\n\tconst [open, setOpen] = useState(false);\n\tconst [mode, setMode] = useState<'login' | 'register'>('login');\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState<string | null>(null);\n\tconst [success, setSuccess] = useState<string | null>(null);\n    const [sendingReset, setSendingReset] = useState<boolean>(false);\n\n\tconst resetForm = () => {\n\t\tsetEmail('');\n\t\tsetPassword('');\n\t\tsetError(null);\n\t\tsetSuccess(null);\n\t};\n\n\tconst handleSubmit = async (e: React.FormEvent) => {\n\t\te.preventDefault();\n\t\tsetLoading(true);\n\t\tsetError(null);\n\t\tsetSuccess(null);\n\n\t\tif (mode === 'register') {\n\t\t\tconst { error } = await supabase.auth.signUp({\n\t\t\t\temail,\n\t\t\t\tpassword,\n        options: {\n          emailRedirectTo: `${window.location.origin}/`,\n        },\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tif (error) {\n\t\t\t\tsetError(error.message);\n\t\t\t} else {\n\t\t\t\tsetSuccess('Registrazione avvenuta! Controlla la tua email per confermare.');\n\t\t\t}\n\t\t} else {\n\t\t\tconst { error } = await supabase.auth.signInWithPassword({\n\t\t\t\temail,\n\t\t\t\tpassword,\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\tif (error) {\n\t\t\t\tsetError(error.message);\n\t\t\t} else {\n\t\t\t\tsetSuccess('Login effettuato!');\n\t\t\t\t// chiudi il dialog dopo un breve delay\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetOpen(false);\n\t\t\t\t\tresetForm();\n\t\t\t\t}, 400);\n\t\t\t}\n\t\t}\n\t};\n\n    const handleForgotPassword = async () => {\n        if (!email) {\n            setError('Inserisci la tua email per ricevere il link di reset.');\n            return;\n        }\n        setSendingReset(true);\n        setError(null);\n        setSuccess(null);\n        const { error } = await supabase.auth.resetPasswordForEmail(email, {\n            redirectTo: `${window.location.origin}/reset-password`,\n        });\n        setSendingReset(false);\n        if (error) {\n            setError(error.message);\n        } else {\n            setSuccess('Email inviata! Controlla la casella per reimpostare la password.');\n        }\n    };\n\n\treturn (\n\t\t<Dialog open={open} onOpenChange={(v) => { setOpen(v); if (!v) resetForm(); }}>\n\t\t\t<DialogTrigger asChild>{trigger}</DialogTrigger>\n\t\t\t<DialogContent>\n\t\t\t\t<DialogHeader>\n\t\t\t\t\t<DialogTitle>{mode === 'login' ? 'Login' : 'Registrazione'}</DialogTitle>\n\t\t\t\t\t<DialogDescription>\n\t\t\t\t\t\t{mode === 'login'\n\t\t\t\t\t\t\t? 'Accedi con la tua email e password.'\n\t\t\t\t\t\t\t: 'Crea un nuovo account con email e password.'}\n\t\t\t\t\t</DialogDescription>\n\t\t\t\t</DialogHeader>\n\t\t\t\t<form onSubmit={handleSubmit} className=\"space-y-4\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\tonChange={e => setEmail(e.target.value)}\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonChange={e => setPassword(e.target.value)}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t{error && <div className=\"text-red-500 text-sm\">{error}</div>}\n\t\t\t\t\t{success && <div className=\"text-green-600 text-sm\">{success}</div>}\n\t\t\t\t\t<DialogFooter>\n\t\t\t\t\t\t<Button type=\"submit\" disabled={loading}>\n\t\t\t\t\t\t\t{loading ? 'Attendi...' : mode === 'login' ? 'Login' : 'Registrati'}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tonClick={() => { setMode(mode === 'login' ? 'register' : 'login'); setError(null); setSuccess(null); }}\n\t\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{mode === 'login' ? 'Non hai un account? Registrati' : 'Hai già un account? Login'}\n\t\t\t\t\t\t</Button>\n                        {mode === 'login' && (\n                            <Button\n                                type=\"button\"\n                                variant=\"link\"\n                                onClick={handleForgotPassword}\n                                disabled={loading || sendingReset}\n                            >\n                                {sendingReset ? 'Invio...' : 'Password dimenticata?'}\n                            </Button>\n                        )}\n\t\t\t\t\t</DialogFooter>\n\t\t\t\t</form>\n\t\t\t</DialogContent>\n\t\t</Dialog>\n\t);\n}\n","size_bytes":4410},"client/src/components/navigation.tsx":{"content":"import { useTheme } from '@/hooks/use-theme';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, CloudUpload, Dumbbell, Home, Users, Settings, LogOut, User as UserIcon } from 'lucide-react';\nimport { BackupManager } from '@/lib/backup';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link, useLocation } from 'wouter';\nimport { cn } from '@/lib/utils';\nimport Logo from '@/img/logo.png';\nimport { LoginDialog } from './login-dialog';\nimport { useAuth } from '@/hooks/use-auth';\nimport { AccountDialog } from './account-dialog';\n\nconst navItems = [\n  { path: '/', icon: Home, label: 'Home' },\n  { path: '/workouts', icon: Dumbbell, label: 'Schede' },\n  { path: '/clients', icon: Users, label: 'Clienti' },\n  { path: '/settings', icon: Settings, label: 'Impostazioni' },\n];\n\nexport function Navigation() {\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n\n  const handleBackup = async () => {\n    try {\n      await BackupManager.exportToJSON();\n      BackupManager.setLastBackupDate();\n      toast({\n        title: \"Backup completato\",\n        description: \"I dati sono stati esportati con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile completare il backup\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-white dark:bg-gray-900 md:glass-effect\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-8 lg:px-12\">\n        <div className=\"flex items-center justify-center md:justify-between py-4 md:py-8\">\n          <Link href=\"/\">\n            <div className=\"hidden md:flex items-center space-x-5 cursor-pointer hover:opacity-80 transition-opacity\">\n              <img src={Logo} alt=\"Logo\" className=\"w-20 h-20 lg:w-28 lg:h-28 object-contain\" />\n              {/* Titoli rimossi come richiesto */}\n            </div>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-10 md:ml-auto md:mr-6\">\n            {navItems.map(({ path, icon: Icon, label }) => {\n              const isActive = location === path;\n              return (\n                <Link key={path} href={path}>\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"flex items-center space-x-4 px-8 py-4 transition-all duration-200 text-lg\",\n                      isActive \n                        ? \"bg-indigo-500/20 text-indigo-600 dark:text-indigo-400 shadow-md\" \n                        : \"text-gray-600 dark:text-gray-300 hover:bg-white/20 dark:hover:bg-black/20\"\n                    )}\n                  >\n                    <Icon size={22} />\n                    <span className=\"font-medium\">{label}</span>\n                  </Button>\n                </Link>\n              );\n            })}\n            {/* Autenticazione - desktop */}\n            {user ? (\n              <div className=\"hidden md:flex items-center gap-3 ml-4\">\n                <AccountDialog\n                  trigger={\n                    <Button type=\"button\" variant=\"outline\" className=\"gap-2 rounded-full border-gray-300 dark:border-gray-700\">\n                      <UserIcon size={16} />\n                      Profilo\n                    </Button>\n                  }\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"rounded-full border-gray-300 dark:border-gray-700\"\n                  onClick={async () => {\n                    await signOut();\n                    toast({ title: 'Sei uscito', description: 'Logout effettuato con successo' });\n                  }}\n                >\n                  <LogOut size={16} />\n                  Esci\n                </Button>\n              </div>\n            ) : (\n              <div className=\"hidden md:flex ml-4\">\n                <LoginDialog\n                  trigger={\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"rounded-full border-gray-300 dark:border-gray-700\"\n                    >\n                      Login\n                    </Button>\n                  }\n                />\n              </div>\n            )}\n          </nav>\n          \n          {/* Destra: azioni + autenticazione mobile */}\n          <div className=\"flex items-center space-x-2 md:space-x-3 md:ml-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"glass-effect hover:bg-white/20 dark:hover:bg-black/20 w-10 h-10 md:w-12 md:h-12\"\n            >\n              {theme === 'light' ? (\n                <Sun className=\"text-yellow-500\" size={24} />\n              ) : (\n                <Moon className=\"text-indigo-400\" size={24} />\n              )}\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleBackup}\n              className=\"glass-effect hover:bg-white/20 dark:hover:bg-black/20 w-10 h-10 md:w-12 md:h-12\"\n            >\n              <CloudUpload className=\"text-indigo-500\" size={24} />\n            </Button>\n\n            {/* Autenticazione - mobile: sposta i bottoni nel top nav */}\n            {user ? (\n              <div className=\"md:hidden flex items-center gap-2\">\n                <AccountDialog\n                  trigger={\n                    <Button size=\"sm\" className=\"gap-2 rounded-full bg-indigo-600 hover:bg-indigo-700 text-white\">\n                      <UserIcon size={16} />\n                      Profilo\n                    </Button>\n                  }\n                />\n                <Button size=\"sm\" className=\"rounded-full bg-gray-800 hover:bg-gray-900 text-white\" onClick={signOut}>\n                  <LogOut size={16} />\n                  Esci\n                </Button>\n              </div>\n            ) : (\n              <div className=\"md:hidden\">\n                <LoginDialog\n                  trigger={\n                    <Button size=\"sm\" className=\"rounded-full bg-indigo-600 hover:bg-indigo-700 text-white\">\n                      Login\n                    </Button>\n                  }\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":6480},"client/src/components/stats-cards.tsx":{"content":"import { TrendingUp, Users, FileText } from 'lucide-react';\nimport { useWorkouts } from '@/hooks/use-workouts';\nimport { useClients } from '@/hooks/use-clients';\n\nexport function StatsCards() {\n  const { data: workouts = [] } = useWorkouts();\n  const { data: clients = [] } = useClients();\n\n  const activeWorkouts = workouts.length;\n  const totalClients = clients.length;\n  const exportedPDFs = parseInt(localStorage.getItem('exportedPDFs') || '0');\n\n  const stats = [\n    {\n      title: 'Schede Attive',\n      value: activeWorkouts,\n      icon: TrendingUp,\n      gradient: 'from-emerald-400 to-teal-500'\n    },\n    {\n      title: 'Clienti Totali',\n      value: totalClients,\n      icon: Users,\n      gradient: 'from-blue-400 to-indigo-500'\n    },\n    {\n      title: 'PDF Esportati',\n      value: exportedPDFs,\n      icon: FileText,\n      gradient: 'from-orange-400 to-red-500'\n    }\n  ];\n\n  return (\n    <div className=\"hidden md:grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n      {stats.map((stat, index) => (\n        <div \n          key={stat.title}\n          className=\"glass-effect rounded-2xl p-6 hover:scale-105 transition-transform duration-300 animate-fade-in\"\n          style={{ animationDelay: `${index * 0.1}s` }}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {stat.title}\n              </p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {stat.value}\n              </p>\n            </div>\n            <div className={`w-12 h-12 bg-gradient-to-r ${stat.gradient} rounded-xl flex items-center justify-center`}>\n              <stat.icon className=\"text-white\" size={24} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1841},"client/src/components/theme-provider.tsx":{"content":"import { ThemeContext, useThemeState } from '@/hooks/use-theme';\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const themeState = useThemeState();\n\n  return (\n    <ThemeContext.Provider value={themeState}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","size_bytes":345},"client/src/components/workout-builder.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { ExerciseForm } from './exercise-form';\nimport { Plus, Save, Eye, Download, Utensils, Users } from 'lucide-react';\nimport { useCreateWorkout, useUpdateWorkout } from '@/hooks/use-workouts';\nimport { useCoachProfile, useClients } from '@/hooks/use-clients';\nimport { useToast } from '@/hooks/use-toast';\nimport { pdfGenerator } from '@/lib/pdf-generator';\nimport { workoutTypes, levels, insertWorkoutSchema, type InsertWorkout, type Week, type Exercise, type Day, type Workout } from '@shared/schema';\nimport { z } from 'zod';\n\nconst formSchema = insertWorkoutSchema.extend({\n  name: z.string().min(1, \"Nome scheda richiesto\"),\n  clientName: z.string().min(1, \"Nome cliente richiesto\"),\n  duration: z.number().min(1, \"Durata richiesta\")\n});\n\ninterface WorkoutBuilderProps {\n  existingWorkout?: Workout;\n  onSuccess?: () => void;\n}\n\nexport function WorkoutBuilder({ existingWorkout, onSuccess }: WorkoutBuilderProps) {\n  const [weeks, setWeeks] = useState<Week[]>(existingWorkout?.weeks || []);\n  const [selectedClientId, setSelectedClientId] = useState<string | null>(existingWorkout?.clientId || null);\n  const { data: coachProfile } = useCoachProfile();\n  const { data: clients } = useClients();\n  const createWorkout = useCreateWorkout();\n  const updateWorkout = useUpdateWorkout();\n  const { toast } = useToast();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: existingWorkout?.name || '',\n      coachName: coachProfile?.name || '', // Coach preso dalle impostazioni\n      clientName: existingWorkout?.clientName || '',\n      clientId: existingWorkout?.clientId || '',\n      workoutType: existingWorkout?.workoutType || '',\n      level: existingWorkout?.level || undefined, // Nuovo campo livello\n      duration: existingWorkout?.duration || 8,\n      description: existingWorkout?.description || '',\n      dietaryAdvice: existingWorkout?.dietaryAdvice || '',\n      weeks: existingWorkout?.weeks || []\n    }\n  });\n\n  // Gestore per la selezione del cliente\n  const handleClientSelect = (clientId: string) => {\n    if (clientId === 'new') {\n      setSelectedClientId(null);\n      form.setValue('clientName', '');\n      form.setValue('clientId', '');\n    } else {\n      const selectedClient = clients?.find(c => c.id === clientId);\n      if (selectedClient) {\n        setSelectedClientId(clientId);\n        form.setValue('clientName', selectedClient.name);\n        form.setValue('clientId', clientId);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (existingWorkout) {\n      setWeeks(existingWorkout.weeks);\n      setSelectedClientId(existingWorkout.clientId || null);\n      form.reset({\n        name: existingWorkout.name || '',\n        coachName: coachProfile?.name || '', // Coach dalle impostazioni\n        clientName: existingWorkout.clientName,\n        clientId: existingWorkout.clientId || '',\n        workoutType: existingWorkout.workoutType,\n        level: existingWorkout.level || undefined, // Nuovo campo livello\n        duration: existingWorkout.duration,\n        description: existingWorkout.description || '',\n        dietaryAdvice: existingWorkout.dietaryAdvice || '',\n        weeks: existingWorkout.weeks\n      });\n    }\n  }, [existingWorkout, form]);\n\n  const addWeek = () => {\n    const newWeek: Week = {\n      id: crypto.randomUUID(),\n      number: weeks.length + 1,\n      name: `SETTIMANA ${weeks.length + 1}`, // Nome default customizzabile\n      days: [\n        {\n          id: crypto.randomUUID(),\n          name: \"Giorno 1\",\n          exercises: []\n        }\n      ]\n    };\n    setWeeks([...weeks, newWeek]);\n  };\n\n  const updateWeek = (weekId: string, updatedWeek: Week) => {\n    setWeeks(weeks.map(week => \n      week.id === weekId ? updatedWeek : week\n    ));\n  };\n\n  const removeWeek = (weekId: string) => {\n    const filtered = weeks.filter(week => week.id !== weekId);\n    const renumbered = filtered.map((week, index) => ({ ...week, number: index + 1 }));\n    setWeeks(renumbered);\n  };\n\n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    try {\n      if (existingWorkout) {\n        // Update existing workout - forza l'uso delle settimane attuali\n        await updateWorkout.mutateAsync({\n          id: existingWorkout.id,\n          updates: {\n            ...data,\n            coachName: coachProfile?.name || data.coachName, // Usa il coach dalle impostazioni\n            weeks: weeks, // Forza l'uso dello stato attuale delle settimane\n            updatedAt: new Date()\n          }\n        });\n        \n        toast({\n          title: \"Scheda aggiornata\",\n          description: \"Le modifiche sono state salvate con successo\"\n        });\n      } else {\n        // Create new workout - forza l'uso delle settimane attuali\n        const workoutData: InsertWorkout = {\n          ...data,\n          coachName: coachProfile?.name || data.coachName, // Usa il coach dalle impostazioni\n          weeks: weeks // Forza l'uso dello stato attuale delle settimane\n        };\n        \n        await createWorkout.mutateAsync(workoutData);\n        \n        toast({\n          title: \"Scheda creata\",\n          description: \"La scheda è stata creata con successo\"\n        });\n        \n        // Reset form for new workouts\n        form.reset();\n        setWeeks([]);\n      }\n\n      onSuccess?.();\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: existingWorkout ? \"Impossibile aggiornare la scheda\" : \"Impossibile salvare la scheda\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handlePreviewPDF = async () => {\n    const formData = form.getValues();\n    const workout = {\n      id: 'preview',\n      ...formData,\n      weeks,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    try {\n      // Include coach profile per applicare le impostazioni nell'anteprima\n      const blob = await pdfGenerator.generateWorkoutPDF(workout, coachProfile);\n      const url = URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile generare l'anteprima PDF\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleExportPDF = async () => {\n    const formData = form.getValues();\n    const workout = {\n      id: 'export',\n      ...formData,\n      weeks,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    try {\n      const blob = await pdfGenerator.generateWorkoutPDF(workout, coachProfile);\n      const filename = `scheda-${formData.clientName.replace(/\\s+/g, '-').toLowerCase()}.pdf`;\n      \n      pdfGenerator.downloadPDF(blob, filename, coachProfile?.exportPath);\n\n      // Update export count\n      const currentCount = parseInt(localStorage.getItem('exportedPDFs') || '0');\n      localStorage.setItem('exportedPDFs', (currentCount + 1).toString());\n\n      toast({\n        title: \"PDF esportato\",\n        description: \"Il PDF è stato scaricato con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile esportare il PDF\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"lg:col-span-2\">\n      <div className=\"glass-effect rounded-2xl p-6 mb-8 animate-fade-in\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            {existingWorkout ? 'Modifica Scheda' : 'Crea Nuova Scheda'}\n          </h2>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Nome Scheda */}\n            <div className=\"mb-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-lg font-semibold\">Nome Scheda</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"es. Scheda Planche\" \n                        {...field}\n                        className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm text-lg\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Client Info */}\n            <div className=\"mb-6\">\n              <FormField\n                control={form.control}\n                name=\"clientName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <Users size={16} />\n                      Cliente\n                    </FormLabel>\n                    <div className=\"space-y-3\">\n                      {clients && clients.length > 0 && (\n                        <Select \n                          value={selectedClientId || 'new'} \n                          onValueChange={handleClientSelect}\n                        >\n                          <SelectTrigger className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n                            <SelectValue placeholder=\"Seleziona cliente esistente\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"new\">Nuovo cliente</SelectItem>\n                            {clients.map((client) => (\n                              <SelectItem key={client.id} value={client.id}>\n                                {client.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      )}\n                      <FormControl>\n                        <Input \n                          placeholder=\"Nome del cliente\" \n                          {...field}\n                          className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\"\n                          disabled={!!selectedClientId}\n                        />\n                      </FormControl>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Workout Type, Level and Duration */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"workoutType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo di Scheda</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n                          <SelectValue placeholder=\"Seleziona tipo\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {workoutTypes.map((type) => (\n                          <SelectItem key={type} value={type}>\n                            {type}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"level\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Livello (Opzionale)</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n                          <SelectValue placeholder=\"Seleziona livello\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">Nessun livello</SelectItem>\n                        {levels.map((level) => (\n                          <SelectItem key={level} value={level}>\n                            {level}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"duration\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Durata (Settimane)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        min=\"1\"\n                        max=\"52\"\n                        placeholder=\"8\"\n                        {...field}\n                        onChange={e => field.onChange(parseInt(e.target.value))}\n                        className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Description */}\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrizione Iniziale</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Programma di allenamento personalizzato...\"\n                      rows={3}\n                      {...field}\n                      className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm resize-none\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Weekly Progression */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"hidden md:block text-lg font-semibold text-gray-900 dark:text-white\">\n                  Progressione Settimanale\n                </h3>\n                <Button \n                  type=\"button\"\n                  onClick={addWeek}\n                  size=\"sm\"\n                  className=\"bg-emerald-500 hover:bg-emerald-600\"\n                >\n                  <Plus className=\"mr-1\" size={14} />\n                  Aggiungi Settimana\n                </Button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {weeks.map((week) => (\n                  <ExerciseForm\n                    key={week.id}\n                    week={week}\n                    onUpdateWeek={(updatedWeek) => updateWeek(week.id, updatedWeek)}\n                    onRemoveWeek={() => removeWeek(week.id)}\n                  />\n                ))}\n              </div>\n            </div>\n\n            {/* Dietary Advice */}\n            <FormField\n              control={form.control}\n              name=\"dietaryAdvice\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center\">\n                    <Utensils className=\"mr-2 text-emerald-500\" size={16} />\n                    Consigli Dietistici\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Consigli nutrizionali per il cliente...\"\n                      rows={4}\n                      {...field}\n                      className=\"glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm resize-none\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Button \n                type=\"submit\"\n                disabled={createWorkout.isPending || updateWorkout.isPending}\n                className=\"flex-1 bg-gradient-primary hover:opacity-90 transition-opacity\"\n              >\n                <Save className=\"mr-2\" size={16} />\n                {(createWorkout.isPending || updateWorkout.isPending) ? 'Salvando...' : (existingWorkout ? 'Aggiorna Scheda' : 'Salva Scheda')}\n              </Button>\n              \n              <Button \n                type=\"button\"\n                onClick={handlePreviewPDF}\n                className=\"flex-1 bg-gradient-secondary hover:opacity-90 transition-opacity\"\n              >\n                <Eye className=\"mr-2\" size={16} />\n                Anteprima PDF\n              </Button>\n              \n              <Button \n                type=\"button\"\n                onClick={handleExportPDF}\n                className=\"flex-1 bg-gradient-accent hover:opacity-90 transition-opacity\"\n              >\n                <Download className=\"mr-2\" size={16} />\n                Esporta PDF\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17906},"client/src/components/workout-card-home.tsx":{"content":"import { formatDistanceToNow } from 'date-fns';\nimport { it } from 'date-fns/locale';\nimport { Eye, FileText, Edit } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { WorkoutBuilder } from '@/components/workout-builder';\nimport { useToast } from '@/hooks/use-toast';\nimport { useCoachProfile } from '@/hooks/use-clients';\nimport { pdfGenerator } from '@/lib/pdf-generator';\nimport { Link } from 'wouter';\nimport type { Workout } from '@shared/schema';\nimport { useState } from 'react';\n\ninterface WorkoutCardHomeProps {\n  workout: Workout;\n}\n\nexport function WorkoutCardHome({ workout }: WorkoutCardHomeProps) {\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n  const { data: coachProfile } = useCoachProfile();\n\n  const handleExportPDF = async () => {\n    try {\n      const blob = await pdfGenerator.generateWorkoutPDF(workout, coachProfile);\n      const filename = `scheda-${workout.clientName.replace(/\\s+/g, '-').toLowerCase()}.pdf`;\n      \n      pdfGenerator.downloadPDF(blob, filename, coachProfile?.exportPath);\n\n      // Update export count\n      const currentCount = parseInt(localStorage.getItem('exportedPDFs') || '0');\n      localStorage.setItem('exportedPDFs', (currentCount + 1).toString());\n\n      toast({\n        title: \"PDF esportato\",\n        description: \"Il PDF è stato scaricato con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile esportare il PDF\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const timeAgo = formatDistanceToNow(workout.updatedAt, {\n    addSuffix: true,\n    locale: it\n  });\n\n  return (\n    <div className=\"p-4 bg-white/30 dark:bg-gray-800/30 rounded-xl hover:bg-white/50 dark:hover:bg-gray-700/50 transition-all duration-200 cursor-pointer animate-fade-in\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h4 className=\"font-medium text-gray-900 dark:text-white text-sm truncate pr-2\">\n          {workout.name || `Scheda ${workout.clientName}`}\n        </h4>\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 flex-shrink-0\">\n          {timeAgo}\n        </span>\n      </div>\n      \n      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n        Cliente: {workout.clientName}\n      </p>\n      \n      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">\n        {workout.workoutType} • {workout.duration} settimane\n      </p>\n      \n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex space-x-1\">\n          <Link href={`/workout/${workout.id}`}>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"p-1 text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20\"\n            >\n              <Eye size={12} />\n            </Button>\n          </Link>\n\n          <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n            <DialogTrigger asChild>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={(e) => e.stopPropagation()}\n                className=\"p-1 text-indigo-500 hover:bg-indigo-50 dark:hover:bg-indigo-900/20\"\n              >\n                <Edit size={12} />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Modifica Scheda - {workout.clientName}</DialogTitle>\n              </DialogHeader>\n              <WorkoutBuilder \n                existingWorkout={workout}\n                onSuccess={() => setShowEditDialog(false)}\n              />\n            </DialogContent>\n          </Dialog>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={(e) => {\n              e.stopPropagation();\n              handleExportPDF();\n            }}\n            className=\"p-1 text-orange-500 hover:bg-orange-50 dark:hover:bg-orange-900/20\"\n          >\n            <FileText size={12} />\n          </Button>\n        </div>\n        \n        <div className=\"flex items-center\">\n          <div className={`w-2 h-2 rounded-full ${\n            Date.now() - workout.updatedAt.getTime() < 7 * 24 * 60 * 60 * 1000 \n              ? 'bg-emerald-400 animate-pulse-soft' \n              : 'bg-gray-300 dark:bg-gray-600'\n          }`} />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4562},"client/src/components/workout-card.tsx":{"content":"import { formatDistanceToNow } from 'date-fns';\nimport { it } from 'date-fns/locale';\nimport { Edit, Copy, FileText, Eye, Trash2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { useDeleteWorkout } from '@/hooks/use-workouts';\nimport { useCoachProfile } from '@/hooks/use-clients';\nimport { pdfGenerator } from '@/lib/pdf-generator';\nimport { Link } from 'wouter';\nimport type { Workout } from '@shared/schema';\n\ninterface WorkoutCardProps {\n  workout: Workout;\n  onEdit?: (workout: Workout) => void;\n  onDuplicate?: (workout: Workout) => void;\n}\n\nexport function WorkoutCard({ workout, onEdit, onDuplicate }: WorkoutCardProps) {\n  const { toast } = useToast();\n  const { data: coachProfile } = useCoachProfile();\n  const deleteWorkout = useDeleteWorkout();\n\n  const handleExportPDF = async () => {\n    try {\n      const blob = await pdfGenerator.generateWorkoutPDF(workout, coachProfile);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `scheda-${workout.clientName.replace(/\\s+/g, '-').toLowerCase()}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      // Update export count\n      const currentCount = parseInt(localStorage.getItem('exportedPDFs') || '0');\n      localStorage.setItem('exportedPDFs', (currentCount + 1).toString());\n\n      toast({\n        title: \"PDF esportato\",\n        description: \"Il PDF è stato scaricato con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile esportare il PDF\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      await deleteWorkout.mutateAsync(workout.id);\n      toast({\n        title: \"Scheda eliminata\",\n        description: \"La scheda è stata rimossa con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile eliminare la scheda\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const timeAgo = formatDistanceToNow(workout.updatedAt, {\n    addSuffix: true,\n    locale: it\n  });\n\n  return (\n    <div className=\"p-4 bg-white/30 dark:bg-gray-800/30 rounded-xl hover:bg-white/50 dark:hover:bg-gray-700/50 transition-all duration-200 cursor-pointer animate-fade-in\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h4 className=\"font-medium text-gray-900 dark:text-white text-sm truncate pr-2\">\n          {workout.name || `Scheda ${workout.clientName}`}\n        </h4>\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 flex-shrink-0\">\n          {timeAgo}\n        </span>\n      </div>\n      \n      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n        Cliente: {workout.clientName}\n      </p>\n      \n      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">\n        {workout.workoutType} • {workout.duration} settimane\n      </p>\n      \n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex space-x-1\">\n          <Link href={`/workout/${workout.id}`}>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"p-1 text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20\"\n            >\n              <Eye size={12} />\n            </Button>\n          </Link>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onEdit?.(workout);\n            }}\n            className=\"p-1 text-indigo-500 hover:bg-indigo-50 dark:hover:bg-indigo-900/20\"\n          >\n            <Edit size={12} />\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDuplicate?.(workout);\n            }}\n            className=\"p-1 text-emerald-500 hover:bg-emerald-50 dark:hover:bg-emerald-900/20\"\n          >\n            <Copy size={12} />\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={(e) => {\n              e.stopPropagation();\n              handleExportPDF();\n            }}\n            className=\"p-1 text-orange-500 hover:bg-orange-50 dark:hover:bg-orange-900/20\"\n          >\n            <FileText size={12} />\n          </Button>\n\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={(e) => e.stopPropagation()}\n                className=\"p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20\"\n              >\n                <Trash2 size={12} />\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Eliminare la scheda?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Questa azione non può essere annullata. La scheda di \"{workout.clientName}\" sarà eliminata definitivamente.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Annulla</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={handleDelete}\n                  className=\"bg-red-500 hover:bg-red-600 text-white\"\n                >\n                  Elimina\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n        \n        <div className=\"flex items-center\">\n          <div className={`w-2 h-2 rounded-full ${\n            Date.now() - workout.updatedAt.getTime() < 7 * 24 * 60 * 60 * 1000 \n              ? 'bg-emerald-400 animate-pulse-soft' \n              : 'bg-gray-300 dark:bg-gray-600'\n          }`} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6297},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport type { Session, User } from \"@supabase/supabase-js\";\nimport { supabase } from \"@/lib/supabase\";\nimport { BackupManager } from \"@/lib/backup\";\n\ntype AuthContextValue = {\n  user: User | null;\n  session: Session | null;\n  loading: boolean;\n  signOut: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextValue | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (!isMounted) return;\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n      // Se non c'è sessione, forza uno stato di logout per coerenza\n      if (!session) {\n        try { await supabase.auth.signOut(); } catch {}\n      }\n    })();\n\n    const { data } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      if (session?.user) {\n        // sync iniziale in background senza bloccare UI/logout\n        BackupManager.ensureInitialSync();\n      } else {\n        // Se la sessione non esiste più, applica logout coerente\n        try { await supabase.auth.signOut(); } catch {}\n      }\n    });\n\n    return () => {\n      isMounted = false;\n      data.subscription.unsubscribe();\n    };\n  }, []);\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const value = useMemo<AuthContextValue>(\n    () => ({ user, session, loading, signOut }),\n    [user, session, loading]\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth(): AuthContextValue {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error(\"useAuth must be used within AuthProvider\");\n  return ctx;\n}\n\n\n","size_bytes":2116},"client/src/hooks/use-clients.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { dbOps } from '@/lib/database';\nimport type { Client, InsertClient, InsertCoachProfile } from '@shared/schema';\n\nexport function useClients() {\n  return useQuery({\n    queryKey: ['clients'],\n    queryFn: () => dbOps.getAllClients(),\n  });\n}\n\nexport function useClient(id: string) {\n  return useQuery({\n    queryKey: ['clients', id],\n    queryFn: () => dbOps.getClient(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateClient() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (client: InsertClient) => dbOps.createClient(client),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['clients'] });\n    },\n  });\n}\n\nexport function useUpdateClient() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<Client> }) =>\n      dbOps.updateClient(id, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['clients'] });\n    },\n  });\n}\n\nexport function useDeleteClient() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) => dbOps.deleteClient(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['clients'] });\n    },\n  });\n}\n\nexport function useCoachProfile() {\n  return useQuery({\n    queryKey: ['coach-profile'],\n    queryFn: async () => {\n      const profile = await dbOps.getCoachProfile();\n      return profile || null;\n    },\n  });\n}\n\nexport function useCreateCoachProfile() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (profile: InsertCoachProfile) => dbOps.createCoachProfile(profile),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['coach-profile'] });\n    },\n  });\n}\n\nexport function useUpdateCoachProfile() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<InsertCoachProfile> }) =>\n      dbOps.updateCoachProfile(id, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['coach-profile'] });\n    },\n  });\n}\n","size_bytes":2215},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.ts":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\nexport function useThemeState() {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('theme');\n      if (saved === 'light' || saved === 'dark') {\n        return saved;\n      }\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    }\n    return 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return { theme, toggleTheme };\n}\n","size_bytes":1200},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-workouts.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { dbOps } from '@/lib/database';\nimport type { Workout, InsertWorkout } from '@shared/schema';\n\nexport function useWorkouts() {\n  return useQuery({\n    queryKey: ['workouts'],\n    queryFn: () => dbOps.getAllWorkouts(),\n  });\n}\n\nexport function useWorkout(id: string) {\n  return useQuery({\n    queryKey: ['workouts', id],\n    queryFn: () => dbOps.getWorkout(id),\n    enabled: !!id,\n  });\n}\n\nexport function useWorkoutsByClient(clientName: string) {\n  return useQuery({\n    queryKey: ['workouts', 'client', clientName],\n    queryFn: () => dbOps.getWorkoutsByClient(clientName),\n    enabled: !!clientName,\n  });\n}\n\nexport function useCreateWorkout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (workout: InsertWorkout) => dbOps.createWorkout(workout),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['workouts'] });\n    },\n  });\n}\n\nexport function useUpdateWorkout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<Workout> }) =>\n      dbOps.updateWorkout(id, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['workouts'] });\n    },\n  });\n}\n\nexport function useDeleteWorkout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) => dbOps.deleteWorkout(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['workouts'] });\n    },\n  });\n}\n","size_bytes":1569},"client/src/lib/backup.ts":{"content":"import { dbOps, db } from './database';\nimport type { Workout, Client, CoachProfile } from '@shared/schema';\nimport { supabase } from '@/lib/supabase';\n\nexport class BackupManager {\n  private static autoBackupTimer: number | undefined;\n  private static autoBackupDelayMs = 2000;\n  static pauseAutoBackup = false;\n  static autoBackupEnabled = false;\n  static async exportToJSON(): Promise<void> {\n    try {\n      const data = await dbOps.exportData();\n      const jsonString = JSON.stringify(data, null, 2);\n      const blob = new Blob([jsonString], { type: 'application/json' });\n      \n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `fittracker-backup-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw new Error('Errore durante l\\'esportazione dei dati');\n    }\n  }\n\n  static async importFromJSON(file: File): Promise<void> {\n    try {\n      console.log('🔄 Inizio importazione file:', file.name, 'Dimensione:', file.size, 'bytes');\n      \n      const text = await file.text();\n      console.log('📄 File letto, lunghezza testo:', text.length);\n      \n      let data;\n      try {\n        data = JSON.parse(text);\n        console.log('✅ JSON parsing riuscito', data);\n      } catch (parseError) {\n        console.error('❌ Errore parsing JSON:', parseError);\n        throw new Error('File JSON non valido');\n      }\n      \n      // Validate the structure\n      console.log('🔍 Validazione struttura dati...');\n      if (!this.isValidBackupData(data)) {\n        console.error('❌ Struttura dati non valida:', data);\n        throw new Error('Formato del file di backup non valido');\n      }\n      console.log('✅ Struttura dati valida');\n\n      // Convert date strings back to Date objects\n      console.log('🔄 Conversione date...');\n      const processedData = this.processImportData(data);\n      console.log('✅ Dati processati:', processedData);\n      \n      console.log('💾 Importazione nel database...');\n      await dbOps.importData(processedData);\n      console.log('✅ Importazione completata con successo!');\n      \n    } catch (error) {\n      console.error('❌ Errore completo durante importazione:', error);\n      if (error instanceof Error) {\n        throw new Error(`Errore durante l'importazione: ${error.message}`);\n      } else {\n        throw new Error('Errore sconosciuto durante l\\'importazione dei dati');\n      }\n    }\n  }\n\n  private static isValidBackupData(data: any): boolean {\n    console.log('🔍 Controllo validità:', {\n      isObject: typeof data === 'object',\n      notNull: data !== null,\n      workouts: data?.workouts,\n      clients: data?.clients,\n      coachProfile: data?.coachProfile,\n      workoutsValid: Array.isArray(data?.workouts) || data?.workouts === undefined,\n      clientsValid: Array.isArray(data?.clients) || data?.clients === undefined,\n      coachProfileValid: typeof data?.coachProfile === 'object' || data?.coachProfile === undefined\n    });\n    \n    const isValid = (\n      typeof data === 'object' &&\n      data !== null &&\n      (Array.isArray(data.workouts) || data.workouts === undefined) &&\n      (Array.isArray(data.clients) || data.clients === undefined) &&\n      (typeof data.coachProfile === 'object' || data.coachProfile === undefined)\n    );\n    \n    console.log('🎯 Risultato validazione:', isValid);\n    return isValid;\n  }\n\n  private static processImportData(data: any): {\n    workouts?: Workout[];\n    clients?: Client[];\n    coachProfile?: CoachProfile;\n  } {\n    const processedData: any = {};\n\n    if (data.workouts) {\n      processedData.workouts = data.workouts.map((workout: any) => ({\n        ...workout,\n        createdAt: new Date(workout.createdAt),\n        updatedAt: new Date(workout.updatedAt)\n      }));\n    }\n\n    if (data.clients) {\n      processedData.clients = data.clients.map((client: any) => ({\n        ...client,\n        createdAt: new Date(client.createdAt)\n      }));\n    }\n\n    if (data.coachProfile) {\n      processedData.coachProfile = data.coachProfile;\n    }\n\n    return processedData;\n  }\n\n  static async getBackupStats(): Promise<{\n    workoutsCount: number;\n    clientsCount: number;\n    lastBackup?: Date;\n  }> {\n    const data = await dbOps.exportData();\n    \n    // Get last backup date from localStorage\n    const lastBackupStr = localStorage.getItem('lastBackupDate');\n    const lastBackup = lastBackupStr ? new Date(lastBackupStr) : undefined;\n\n    return {\n      workoutsCount: data.workouts.length,\n      clientsCount: data.clients.length,\n      lastBackup\n    };\n  }\n\n  static setLastBackupDate(): void {\n    localStorage.setItem('lastBackupDate', new Date().toISOString());\n  }\n\n  // ===== Cloud backup via Supabase Storage =====\n  static async exportToSupabaseStorage(): Promise<{ path: string }>{\n    const BUCKET = 'backups';\n    const { data: userRes, error: userErr } = await supabase.auth.getUser();\n    if (userErr) throw userErr;\n    const userId = userRes.user?.id;\n    if (!userId) throw new Error('Utente non autenticato');\n\n    const exportData = await dbOps.exportData();\n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n\n    // Usa un solo file per utente\n    const latestPath = `${userId}/data.json`;\n\n    // Carica/aggiorna data.json (upsert)\n    const { error: upErr } = await supabase.storage\n      .from(BUCKET)\n      .upload(latestPath, blob, { contentType: 'application/json', upsert: true });\n    if (upErr) throw upErr;\n\n    this.setLastBackupDate();\n    return { path: latestPath };\n  }\n\n  static async importFromSupabaseStorage(): Promise<void> {\n    const BUCKET = 'backups';\n    const { data: userRes, error: userErr } = await supabase.auth.getUser();\n    if (userErr) throw userErr;\n    const userId = userRes.user?.id;\n    if (!userId) throw new Error('Utente non autenticato');\n\n    const latestPath = `${userId}/data.json`;\n    const { data, error } = await supabase.storage.from(BUCKET).download(latestPath);\n    if (error) throw error;\n    if (!data) throw new Error('Nessun backup cloud trovato');\n\n    // Evita trigger di auto-backup durante l'import\n    this.pauseAutoBackup = true;\n    try {\n      const file = new File([data], 'data.json', { type: 'application/json' });\n      await this.importFromJSON(file);\n    } finally {\n      this.pauseAutoBackup = false;\n    }\n  }\n\n  static scheduleAutoBackup(): void {\n    if (!this.autoBackupEnabled || this.pauseAutoBackup) return;\n    supabase.auth.getUser().then(({ data }: { data: { user: { id: string } | null } }) => {\n      if (!data?.user) return;\n      if (this.autoBackupTimer) clearTimeout(this.autoBackupTimer);\n      this.autoBackupTimer = window.setTimeout(() => {\n        // Auto disabilitato: non fare nulla\n        return;\n      }, this.autoBackupDelayMs);\n    });\n  }\n\n  // Carica dal cloud: scarica e sostituisce completamente i dati locali\n  static async mergeFromSupabaseStorage(): Promise<void> {\n    const BUCKET = 'backups';\n    const { data: userRes, error: userErr } = await supabase.auth.getUser();\n    if (userErr) throw userErr;\n    const userId = userRes.user?.id;\n    if (!userId) throw new Error('Utente non autenticato');\n\n    const latestPath = `${userId}/data.json`;\n    const { data, error } = await supabase.storage.from(BUCKET).download(latestPath);\n    if (error) throw error;\n    if (!data) throw new Error('Nessun backup cloud trovato');\n\n    // Evita trigger di auto-backup durante l'import\n    this.pauseAutoBackup = true;\n    try {\n      const file = new File([data], 'data.json', { type: 'application/json' });\n      // Usa importFromJSON che pulisce sempre tutto prima di importare\n      await this.importFromJSON(file);\n    } finally {\n      this.pauseAutoBackup = false;\n    }\n  }\n\n  // Sync iniziale: importa dal cloud solo se il DB locale è vuoto\n  static async ensureInitialSync(): Promise<void> {\n    try {\n      const local = await dbOps.exportData();\n      const isEmpty = (local.workouts?.length ?? 0) === 0 && (local.clients?.length ?? 0) === 0 && !local.coachProfile;\n      if (!isEmpty) return;\n      await this.importFromSupabaseStorage();\n    } catch {\n      // ignora se non esiste ancora un backup remoto o altri errori non critici\n    }\n  }\n}\n\n// Registra auto-backup su modifiche Dexie (solo in ambiente browser)\ntry {\n  db.workouts.hook('creating', () => BackupManager.scheduleAutoBackup());\n  db.workouts.hook('updating', () => BackupManager.scheduleAutoBackup());\n  db.workouts.hook('deleting', () => BackupManager.scheduleAutoBackup());\n\n  db.clients.hook('creating', () => BackupManager.scheduleAutoBackup());\n  db.clients.hook('updating', () => BackupManager.scheduleAutoBackup());\n  db.clients.hook('deleting', () => BackupManager.scheduleAutoBackup());\n\n  db.coachProfile.hook('creating', () => BackupManager.scheduleAutoBackup());\n  db.coachProfile.hook('updating', () => BackupManager.scheduleAutoBackup());\n  db.coachProfile.hook('deleting', () => BackupManager.scheduleAutoBackup());\n} catch {}\n\n","size_bytes":9256},"client/src/lib/database.ts":{"content":"import Dexie, { Table } from 'dexie';\nimport type { Workout, Client, CoachProfile, Exercise, Week, Day } from '@shared/schema';\n\nexport class FitTrackerDatabase extends Dexie {\n  workouts!: Table<Workout>;\n  clients!: Table<Client>;\n  coachProfile!: Table<CoachProfile>;\n\n  constructor() {\n    super('FitTrackerDatabase');\n    this.version(1).stores({\n      workouts: 'id, clientName, coachName, workoutType, createdAt, updatedAt',\n      clients: 'id, name, createdAt',\n      coachProfile: 'id, name'\n    });\n    \n    // Upgrade hook to migrate existing data\n    this.version(1).upgrade(async (tx) => {\n      await this.migrateWorkouts(tx);\n    });\n  }\n\n  private async migrateWorkouts(tx: any) {\n    const workouts = await tx.table('workouts').toArray();\n    \n    for (const workout of workouts) {\n      let needsUpdate = false;\n      \n      if (workout.weeks) {\n        for (const week of workout.weeks) {\n          // Check if week has old structure (exercises directly)\n          if (week.exercises && !week.days) {\n            // Migrate to new structure\n            week.days = [\n              {\n                id: crypto.randomUUID(),\n                name: \"Giorno 1\",\n                exercises: week.exercises || [],\n                notes: ''\n              }\n            ];\n            delete week.exercises;\n            week.notes = week.notes || '';\n            needsUpdate = true;\n          }\n          \n          // Ensure all exercises have rest field\n          if (week.days) {\n            for (const day of week.days) {\n              if (day.exercises) {\n                for (const exercise of day.exercises) {\n                  if (!exercise.rest) {\n                    exercise.rest = '';\n                    needsUpdate = true;\n                  }\n                }\n              }\n              if (!day.notes) {\n                day.notes = '';\n                needsUpdate = true;\n              }\n            }\n          }\n        }\n      }\n      \n      if (needsUpdate) {\n        await tx.table('workouts').put(workout);\n      }\n    }\n  }\n}\n\nexport const db = new FitTrackerDatabase();\n\n// Database operations\nexport const dbOps = {\n  // Workout operations\n  async getAllWorkouts(): Promise<Workout[]> {\n    return await db.workouts.orderBy('updatedAt').reverse().toArray();\n  },\n\n  async getWorkout(id: string): Promise<Workout | undefined> {\n    return await db.workouts.get(id);\n  },\n\n  async createWorkout(workout: Omit<Workout, 'id' | 'createdAt' | 'updatedAt'>): Promise<Workout> {\n    const now = new Date();\n    const newWorkout: Workout = {\n      ...workout,\n      id: crypto.randomUUID(),\n      createdAt: now,\n      updatedAt: now\n    };\n    await db.workouts.add(newWorkout);\n    return newWorkout;\n  },\n\n  async updateWorkout(id: string, updates: Partial<Workout>): Promise<Workout | undefined> {\n    const existing = await db.workouts.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates, updatedAt: new Date() };\n    await db.workouts.put(updated);\n    return updated;\n  },\n\n  async deleteWorkout(id: string): Promise<boolean> {\n    const existing = await db.workouts.get(id);\n    if (!existing) return false;\n    await db.workouts.delete(id);\n    return true;\n  },\n\n  async getWorkoutsByClient(clientName: string): Promise<Workout[]> {\n    return await db.workouts.where('clientName').equals(clientName).toArray();\n  },\n\n  // Client operations\n  async getAllClients(): Promise<Client[]> {\n    return await db.clients.orderBy('createdAt').reverse().toArray();\n  },\n\n  async getClient(id: string): Promise<Client | undefined> {\n    return await db.clients.get(id);\n  },\n\n  async createClient(client: Omit<Client, 'id' | 'createdAt'>): Promise<Client> {\n    const newClient: Client = {\n      ...client,\n      id: crypto.randomUUID(),\n      createdAt: new Date()\n    };\n    await db.clients.add(newClient);\n    return newClient;\n  },\n\n  async updateClient(id: string, updates: Partial<Client>): Promise<Client | undefined> {\n    const existing = await db.clients.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    await db.clients.put(updated);\n    return updated;\n  },\n\n  async deleteClient(id: string): Promise<boolean> {\n    const existing = await db.clients.get(id);\n    if (!existing) return false;\n    await db.clients.delete(id);\n    return true;\n  },\n\n  async getClientByName(name: string): Promise<Client | undefined> {\n    return await db.clients.where('name').equals(name).first();\n  },\n\n  // Coach profile operations\n  async getCoachProfile(): Promise<CoachProfile | undefined> {\n    try {\n      // Prima controlla nel database Dexie\n      const profiles = await db.coachProfile.toArray();\n      if (profiles.length > 0) {\n        return profiles[0];\n      }\n\n      // Se non c'è niente in Dexie, prova localStorage come fallback\n      const stored = localStorage.getItem('coach-profile');\n      if (stored) {\n        const profile = JSON.parse(stored) as CoachProfile;\n        // Migra da localStorage a Dexie\n        await db.coachProfile.add(profile);\n        localStorage.removeItem('coach-profile'); // Pulisci localStorage\n        return profile;\n      }\n\n      return undefined;\n    } catch (error) {\n      console.error('Error getting coach profile:', error);\n      return undefined;\n    }\n  },\n\n  async createCoachProfile(profile: Omit<CoachProfile, 'id'>): Promise<CoachProfile> {\n    try {\n      // Clear any existing profiles first\n      await db.coachProfile.clear();\n      \n      const newProfile: CoachProfile = {\n        ...profile,\n        id: crypto.randomUUID(),\n        pdfLineColor: profile.pdfLineColor || '#000000',\n        pdfTextColor: profile.pdfTextColor || '#4F46E5',\n        showWatermark: profile.showWatermark ?? true\n      };\n      \n      await db.coachProfile.add(newProfile);\n      \n      // Backup anche in localStorage per sicurezza\n      localStorage.setItem('coach-profile', JSON.stringify(newProfile));\n      \n      return newProfile;\n    } catch (error) {\n      console.error('Error creating coach profile:', error);\n      throw error;\n    }\n  },\n\n  async updateCoachProfile(id: string, updates: Partial<CoachProfile>): Promise<CoachProfile | undefined> {\n    try {\n      const existing = await db.coachProfile.get(id);\n      if (!existing) {\n        // Se non esiste un profilo, creane uno nuovo con i dati forniti\n        if (updates.name) {\n          return await this.createCoachProfile(updates as Omit<CoachProfile, 'id'>);\n        }\n        return undefined;\n      }\n      \n      const updated = { \n        ...existing, \n        ...updates,\n        pdfLineColor: updates.pdfLineColor ?? existing.pdfLineColor,\n        pdfTextColor: updates.pdfTextColor ?? existing.pdfTextColor,\n        showWatermark: updates.showWatermark ?? existing.showWatermark\n      };\n      \n      await db.coachProfile.put(updated);\n      \n      // Backup anche in localStorage per sicurezza\n      localStorage.setItem('coach-profile', JSON.stringify(updated));\n      \n      return updated;\n    } catch (error) {\n      console.error('Error updating coach profile:', error);\n      throw error;\n    }\n  },\n\n  // Data management\n  async clearAllData(): Promise<void> {\n    await Promise.all([\n      db.workouts.clear(),\n      db.clients.clear(),\n      db.coachProfile.clear()\n    ]);\n    // Rimuovi anche il backup del profilo in localStorage per evitare la re-importazione automatica\n    try { localStorage.removeItem('coach-profile'); } catch {}\n  },\n\n  async exportData(): Promise<{ workouts: Workout[], clients: Client[], coachProfile: CoachProfile | null }> {\n    const [workouts, clients, coachProfile] = await Promise.all([\n      db.workouts.toArray(),\n      db.clients.toArray(),\n      this.getCoachProfile()\n    ]);\n    \n    return {\n      workouts,\n      clients, \n      coachProfile: coachProfile || null\n    };\n  },\n\n  async importData(data: { workouts?: Workout[], clients?: Client[], coachProfile?: CoachProfile }): Promise<void> {\n    console.log('💾 Importazione dati nel database:', data);\n    \n    try {\n      await this.clearAllData();\n      console.log('🗑️ Database pulito');\n      \n      if (data.workouts && data.workouts.length > 0) {\n        console.log('📝 Importo', data.workouts.length, 'workouts');\n        await db.workouts.bulkAdd(data.workouts);\n        console.log('✅ Workouts importati');\n      }\n      \n      if (data.clients && data.clients.length > 0) {\n        console.log('👥 Importo', data.clients.length, 'clienti');\n        await db.clients.bulkAdd(data.clients);\n        console.log('✅ Clienti importati');\n      }\n      \n      if (data.coachProfile) {\n        console.log('👨‍💼 Importo profilo coach:', data.coachProfile);\n        await db.coachProfile.add(data.coachProfile);\n        console.log('✅ Profilo coach importato');\n      }\n      \n      console.log('🎉 Importazione completata con successo!');\n    } catch (error) {\n      console.error('❌ Errore durante importazione database:', error);\n      throw error;\n    }\n  }\n};","size_bytes":9061},"client/src/lib/image-utils.ts":{"content":"// Utility functions for image handling\n\nexport function convertImageToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject(new Error('Failed to read file as base64'));\n      }\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n}\n\nexport function resizeImage(file: File, maxWidth: number, maxHeight: number, quality: number = 0.8): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      // Calculate new dimensions\n      let { width, height } = img;\n      \n      if (width > height) {\n        if (width > maxWidth) {\n          height = (height * maxWidth) / width;\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = (width * maxHeight) / height;\n          height = maxHeight;\n        }\n      }\n      \n      canvas.width = width;\n      canvas.height = height;\n      \n      // Draw and compress\n      ctx?.drawImage(img, 0, 0, width, height);\n      const base64 = canvas.toDataURL('image/jpeg', quality);\n      resolve(base64);\n    };\n    \n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  });\n}\n\nexport function validateImageFile(file: File): boolean {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  \n  if (!validTypes.includes(file.type)) {\n    throw new Error('Formato file non supportato. Usa JPG, PNG o WebP.');\n  }\n  \n  if (file.size > maxSize) {\n    throw new Error('File troppo grande. Massimo 5MB.');\n  }\n  \n  return true;\n}\n\nexport async function processImageForUpload(file: File, maxWidth: number = 800, maxHeight: number = 600): Promise<string> {\n  validateImageFile(file);\n  return await resizeImage(file, maxWidth, maxHeight, 0.8);\n}","size_bytes":2084},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from 'jspdf';\nimport type { Workout, CoachProfile } from '@shared/schema';\n\nexport class PDFGenerator {\n  private doc: jsPDF;\n  private pageWidth: number;\n  private pageHeight: number;\n  private margin: number;\n\n  constructor() {\n    this.doc = new jsPDF();\n    this.pageWidth = this.doc.internal.pageSize.getWidth();\n    this.pageHeight = this.doc.internal.pageSize.getHeight();\n    this.margin = 20;\n  }\n\n  async generateWorkoutPDF(workout: Workout, coachProfile?: CoachProfile | null, filename?: string): Promise<Blob> {\n    this.doc = new jsPDF();\n    let yPosition = this.margin;\n\n    // Set colors from coach profile\n    const lineColor = coachProfile?.pdfLineColor || '#000000';\n    const textColor = coachProfile?.pdfTextColor || '#4F46E5';\n    this.doc.setDrawColor(lineColor);\n    this.doc.setTextColor('#000000'); // Keep body text black for readability\n\n    // Header with coach info and logo\n    yPosition = this.addHeader(workout, yPosition, coachProfile, lineColor, textColor);\n    yPosition += 10;\n\n    // Workout info\n    yPosition = this.addWorkoutInfo(workout, yPosition, lineColor);\n    yPosition += 10;\n\n    // Description\n    if (workout.description) {\n      yPosition = this.addDescription(workout.description, yPosition, lineColor, textColor);\n      yPosition += 10;\n    }\n\n    // Weekly progression\n    yPosition = this.addWeeklyProgression(workout, yPosition, lineColor, textColor);\n\n    // Dietary advice\n    if (workout.dietaryAdvice) {\n      yPosition = this.addDietaryAdvice(workout.dietaryAdvice, yPosition, lineColor, textColor);\n    }\n\n    // Footer with coach contact info (includes optional small watermark)\n    this.addFooter(coachProfile);\n\n    return this.doc.output('blob');\n  }\n\n  downloadPDF(blob: Blob, filename: string, exportPath?: string): void {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    \n    // If export path is specified, suggest it in the filename\n    if (exportPath && exportPath.trim()) {\n      a.download = `${exportPath.replace(/\\/$/, '')}/${filename}`;\n    }\n    \n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  private addHeader(workout: Workout, yPosition: number, coachProfile?: CoachProfile | null, lineColor?: string, textColor?: string): number {\n    // Add logo if present - posizionato sopra il titolo\n    if (coachProfile?.logo) {\n      try {\n        // Logo centrato sopra il titolo\n        const logoSize = 30;\n        const logoX = (this.pageWidth - logoSize) / 2;\n        this.doc.addImage(coachProfile.logo, 'JPEG', logoX, yPosition, logoSize, logoSize);\n        yPosition += logoSize + 10; // Spazio dopo il logo\n      } catch (error) {\n        console.warn('Could not add logo to PDF:', error);\n      }\n    }\n\n    // Title - usa il nome della scheda se il flag è attivo\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.setFontSize(24);\n    const titleRgb = this.hexToRgb(textColor || '#4F46E5');\n    this.doc.setTextColor(titleRgb.r, titleRgb.g, titleRgb.b);\n    \n    const title = (coachProfile?.useWorkoutNameAsTitle && workout.name) \n      ? workout.name.toUpperCase() \n      : 'SCHEDA DI ALLENAMENTO';\n    \n    // Ridimensiona dinamicamente il titolo se eccede la larghezza utile\n    const maxTitleWidth = this.pageWidth - 2 * this.margin;\n    let titleFontSize = 24;\n    this.doc.setFontSize(titleFontSize);\n    while (this.doc.getTextWidth(title) > maxTitleWidth && titleFontSize > 12) {\n      titleFontSize -= 1;\n      this.doc.setFontSize(titleFontSize);\n    }\n    this.doc.text(title, this.pageWidth / 2, yPosition + 10, { align: 'center' });\n    yPosition += 15 + Math.max(0, (24 - titleFontSize));\n\n    // Subtitle\n    this.doc.setFontSize(14);\n    this.doc.setTextColor(0, 0, 0);\n    const subtitle = `${workout.workoutType} - ${workout.duration} settimane`;\n    const subtitleMaxWidth = this.pageWidth - 2 * this.margin;\n    if (this.doc.getTextWidth(subtitle) > subtitleMaxWidth) {\n      const lines = this.doc.splitTextToSize(subtitle, subtitleMaxWidth);\n      this.doc.text(lines, this.pageWidth / 2, yPosition, { align: 'center' });\n      yPosition += lines.length * 6 + 3;\n    } else {\n      this.doc.text(subtitle, this.pageWidth / 2, yPosition, { align: 'center' });\n      yPosition += 15;\n    }\n\n    // Coach name if present\n    if (coachProfile?.name) {\n      this.doc.setFontSize(12);\n      this.doc.setTextColor(100, 100, 100);\n      this.doc.text(`Coach: ${coachProfile.name}`, this.pageWidth / 2, yPosition, { align: 'center' });\n      yPosition += 8;\n    }\n\n    // Coach biography if present\n    if (coachProfile?.bio) {\n      this.doc.setFontSize(10);\n      this.doc.setTextColor(80, 80, 80);\n      const bioLines = this.doc.splitTextToSize(coachProfile.bio, this.pageWidth - 2 * this.margin);\n      this.doc.text(bioLines, this.pageWidth / 2, yPosition, { align: 'center' });\n      yPosition += bioLines.length * 4 + 5;\n    }\n\n    // Line separator with custom color\n    if (lineColor) {\n      const rgb = this.hexToRgb(lineColor);\n      this.doc.setDrawColor(rgb.r, rgb.g, rgb.b);\n    } else {\n      this.doc.setDrawColor(79, 70, 229);\n    }\n    this.doc.setLineWidth(1);\n    this.doc.line(this.margin, yPosition, this.pageWidth - this.margin, yPosition);\n    yPosition += 10;\n\n    return yPosition;\n  }\n\n  private addWorkoutInfo(workout: Workout, yPosition: number, lineColor?: string): number {\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.setFontSize(12);\n    this.doc.setTextColor(0, 0, 0);\n\n    // Coach and client info in two columns\n    const midPoint = this.pageWidth / 2;\n    \n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('LIVELLO:', this.margin, yPosition);\n    this.doc.text('CLIENTE:', midPoint, yPosition);\n    \n    this.doc.setFont('helvetica', 'normal');\n    const leftValX = this.margin + 25;\n    const rightValX = midPoint + 30;\n    const leftMaxW = midPoint - leftValX - 5;\n    const rightMaxW = (this.pageWidth - this.margin) - rightValX - 5;\n    const levelLines = this.doc.splitTextToSize(workout.level || '', Math.max(0, leftMaxW));\n    const clientLines = this.doc.splitTextToSize(workout.clientName || '', Math.max(0, rightMaxW));\n    this.doc.text(levelLines, leftValX, yPosition);\n    this.doc.text(clientLines, rightValX, yPosition);\n    yPosition += Math.max(levelLines.length, clientLines.length) * 5 + 2;\n\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.text('TIPO:', this.margin, yPosition);\n    this.doc.text('DURATA:', midPoint, yPosition);\n    \n    this.doc.setFont('helvetica', 'normal');\n    const typeLines = this.doc.splitTextToSize(workout.workoutType || '', Math.max(0, leftMaxW));\n    const durationLines = this.doc.splitTextToSize(`${workout.duration} settimane`, Math.max(0, rightMaxW));\n    this.doc.text(typeLines, leftValX, yPosition);\n    this.doc.text(durationLines, rightValX, yPosition);\n    yPosition += Math.max(typeLines.length, durationLines.length) * 5 + 2;\n\n    return yPosition;\n  }\n\n  private addDescription(description: string, yPosition: number, lineColor?: string, textColor?: string): number {\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.setFontSize(14);\n    const titleRgb = this.hexToRgb(textColor || '#4F46E5');\n    this.doc.setTextColor(titleRgb.r, titleRgb.g, titleRgb.b);\n    this.doc.text('DESCRIZIONE', this.margin, yPosition);\n    yPosition += 8;\n\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.setFontSize(10);\n    this.doc.setTextColor(0, 0, 0);\n    \n    const lines = this.doc.splitTextToSize(description, this.pageWidth - 2 * this.margin);\n    this.doc.text(lines, this.margin, yPosition);\n    yPosition += lines.length * 5;\n\n    return yPosition;\n  }\n\n  private addWeeklyProgression(workout: Workout, yPosition: number, lineColor?: string, textColor?: string): number {\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.setFontSize(14);\n    const titleRgb = this.hexToRgb(textColor || '#4F46E5');\n    this.doc.setTextColor(titleRgb.r, titleRgb.g, titleRgb.b);\n    this.doc.text('PROGRESSIONE SETTIMANALE', this.margin, yPosition);\n    yPosition += 10;\n\n    for (const week of workout.weeks) {\n      // Check if we need a new page\n      if (yPosition > this.pageHeight - 80) {\n        this.doc.addPage();\n        yPosition = this.margin;\n      }\n\n      // Week header - usa il nome customizzabile se presente\n      this.doc.setFont('helvetica', 'bold');\n      this.doc.setFontSize(12);\n      this.doc.setTextColor(0, 0, 0);\n      const weekName = (week.name || `SETTIMANA ${week.number}`).toUpperCase();\n      const weekLines = this.doc.splitTextToSize(weekName, this.pageWidth - 2 * this.margin);\n      this.doc.text(weekLines, this.margin, yPosition);\n      yPosition += weekLines.length * 6;\n\n      // Week notes\n      if (week.notes) {\n        this.doc.setFont('helvetica', 'italic');\n        this.doc.setFontSize(9);\n        const noteLines = this.doc.splitTextToSize(week.notes, this.pageWidth - 2 * this.margin);\n        this.doc.text(noteLines, this.margin, yPosition);\n        yPosition += noteLines.length * 4;\n      }\n\n      // Process each day in the week\n      for (const day of week.days) {\n        if (yPosition > this.pageHeight - 60) {\n          this.doc.addPage();\n          yPosition = this.margin;\n        }\n\n        // Day header\n        this.doc.setFont('helvetica', 'bold');\n        this.doc.setFontSize(11);\n        const dayTitleRgb = this.hexToRgb(textColor || '#4F46E5');\n        this.doc.setTextColor(dayTitleRgb.r, dayTitleRgb.g, dayTitleRgb.b);\n        const dayLines = this.doc.splitTextToSize(day.name || '', this.pageWidth - 2 * this.margin - 10);\n        this.doc.text(dayLines, this.margin + 5, yPosition);\n        yPosition += dayLines.length * 6;\n\n        // Day notes\n        if (day.notes) {\n          this.doc.setFont('helvetica', 'italic');\n          this.doc.setFontSize(8);\n          const dayNoteLines = this.doc.splitTextToSize(day.notes, this.pageWidth - 2 * this.margin - 10);\n          this.doc.text(dayNoteLines, this.margin + 10, yPosition);\n          yPosition += dayNoteLines.length * 3;\n        }\n\n        if (day.exercises.length > 0) {\n          // Exercise table headers\n          this.doc.setFont('helvetica', 'bold');\n          this.doc.setFontSize(8);\n          this.doc.setTextColor(0, 0, 0);\n          this.doc.text('ESERCIZIO', this.margin + 10, yPosition);\n          this.doc.text('SERIE', this.margin + 70, yPosition);\n          this.doc.text('REPS', this.margin + 95, yPosition);\n          this.doc.text('CARICO', this.margin + 120, yPosition);\n          this.doc.text('RECUPERO', this.margin + 150, yPosition);\n          yPosition += 5;\n\n          // Line under headers with custom color\n          if (lineColor) {\n            const rgb = this.hexToRgb(lineColor);\n            this.doc.setDrawColor(rgb.r, rgb.g, rgb.b);\n          } else {\n            this.doc.setDrawColor(200, 200, 200);\n          }\n          this.doc.setLineWidth(0.3);\n          this.doc.line(this.margin + 10, yPosition, this.pageWidth - this.margin - 10, yPosition);\n          yPosition += 3;\n\n          // Exercises\n          this.doc.setFont('helvetica', 'normal');\n          for (const exercise of day.exercises) {\n            if (yPosition > this.pageHeight - 30) {\n              this.doc.addPage();\n              yPosition = this.margin;\n            }\n\n            // Add exercise image if present\n            if (exercise.imageUrl) {\n              try {\n                // Add image to PDF (small thumbnail)\n                this.doc.addImage(exercise.imageUrl, 'JPEG', this.margin + 5, yPosition - 3, 8, 8);\n              } catch (error) {\n                console.warn('Could not add exercise image to PDF:', error);\n              }\n            }\n\n            // Exercise data con wrapping e altezza riga dinamica\n            const nameX = this.margin + (exercise.imageUrl ? 18 : 10);\n            const setsX = this.margin + 70;\n            const repsX = this.margin + 95;\n            const loadX = this.margin + 120;\n            const restX = this.margin + 150;\n            const rowRightX = this.pageWidth - this.margin - 10;\n\n            const nameMax = Math.max(0, setsX - nameX - 2);\n            const setsMax = Math.max(0, repsX - setsX - 2);\n            const repsMax = Math.max(0, loadX - repsX - 2);\n            const loadMax = Math.max(0, restX - loadX - 2);\n            const restMax = Math.max(0, rowRightX - restX);\n\n            const nameLines = this.doc.splitTextToSize(exercise.name || '', nameMax);\n            const setsLines = this.doc.splitTextToSize(exercise.sets || '', setsMax);\n            const repsLines = this.doc.splitTextToSize(exercise.reps || '', repsMax);\n            const loadLines = this.doc.splitTextToSize(exercise.load || '', loadMax);\n            const restLines = this.doc.splitTextToSize(exercise.rest || '', restMax);\n\n            const lineHeight = 3.2; // per font size 8\n            const rowLines = Math.max(nameLines.length, setsLines.length, repsLines.length, loadLines.length, restLines.length);\n            const rowHeight = rowLines * lineHeight;\n\n            // Nuova pagina se la riga non ci sta\n            if (yPosition + rowHeight > this.pageHeight - 30) {\n              this.doc.addPage();\n              yPosition = this.margin;\n            }\n\n            this.doc.text(nameLines, nameX, yPosition);\n            this.doc.text(setsLines, setsX, yPosition);\n            this.doc.text(repsLines, repsX, yPosition);\n            this.doc.text(loadLines, loadX, yPosition);\n            this.doc.text(restLines, restX, yPosition);\n            yPosition += rowHeight + 2;\n\n            // Exercise notes\n            if (exercise.notes) {\n              this.doc.setFont('helvetica', 'italic');\n              this.doc.setFontSize(7);\n              const noteLines = this.doc.splitTextToSize(`Note: ${exercise.notes}`, this.pageWidth - 2 * this.margin - 20);\n              this.doc.text(noteLines, this.margin + 15, yPosition);\n              yPosition += noteLines.length * 3;\n              this.doc.setFont('helvetica', 'normal');\n              this.doc.setFontSize(8);\n            }\n          }\n        }\n        \n        // Line at the bottom of the day block (uguale a quella sotto le intestazioni)\n        if (yPosition > this.pageHeight - this.margin) {\n          this.doc.addPage();\n          yPosition = this.margin;\n        }\n        if (lineColor) {\n          const rgb2 = this.hexToRgb(lineColor);\n          this.doc.setDrawColor(rgb2.r, rgb2.g, rgb2.b);\n        } else {\n          this.doc.setDrawColor(200, 200, 200);\n        }\n        this.doc.setLineWidth(0.3);\n        this.doc.line(this.margin + 10, yPosition, this.pageWidth - this.margin - 10, yPosition);\n        yPosition += 3;\n      }\n\n      yPosition += 5; // Space after each week\n    }\n\n    return yPosition;\n  }\n\n  private addDietaryAdvice(advice: string, yPosition: number, lineColor?: string, textColor?: string): number {\n    if (yPosition > this.pageHeight - 60) {\n      this.doc.addPage();\n      yPosition = this.margin;\n    }\n\n    this.doc.setFont('helvetica', 'bold');\n    this.doc.setFontSize(14);\n    const titleRgb = this.hexToRgb(textColor || '#4F46E5');\n    this.doc.setTextColor(titleRgb.r, titleRgb.g, titleRgb.b);\n    this.doc.text('CONSIGLI DIETISTICI', this.margin, yPosition);\n    yPosition += 8;\n\n    this.doc.setFont('helvetica', 'normal');\n    this.doc.setFontSize(10);\n    this.doc.setTextColor(0, 0, 0);\n    \n    const lines = this.doc.splitTextToSize(advice, this.pageWidth - 2 * this.margin);\n    this.doc.text(lines, this.margin, yPosition);\n\n    return yPosition + lines.length * 5;\n  }\n\n  private addFooter(coachProfile?: CoachProfile | null): void {\n    const footerY = this.pageHeight - 25;\n    \n    // Coach contact info\n    if (coachProfile) {\n      this.doc.setFont('helvetica', 'normal');\n      this.doc.setFontSize(8);\n      this.doc.setTextColor(100, 100, 100);\n      \n      let contactInfo = [];\n      if (coachProfile.email) contactInfo.push(`Email: ${coachProfile.email}`);\n      if (coachProfile.phone) contactInfo.push(`Tel: ${coachProfile.phone}`);\n      if (coachProfile.instagram) {\n        const instagram = coachProfile.instagram.startsWith('@') || coachProfile.instagram.startsWith('http') \n          ? coachProfile.instagram \n          : `@${coachProfile.instagram}`;\n        contactInfo.push(`Instagram: ${instagram}`);\n      }\n      if (coachProfile.facebook) {\n        contactInfo.push(`Facebook: ${coachProfile.facebook}`);\n      }\n      if (coachProfile.website) {\n        const website = coachProfile.website.startsWith('http') \n          ? coachProfile.website \n          : `https://${coachProfile.website}`;\n        contactInfo.push(`Web: ${website}`);\n      }\n      \n      if (contactInfo.length > 0) {\n        const contactText = contactInfo.join(' • ');\n        const lines = this.doc.splitTextToSize(contactText, this.pageWidth - 2 * this.margin);\n        this.doc.text(lines, this.pageWidth / 2, footerY, { align: 'center' });\n      }\n    }\n    \n    // Generation info (piccola filigrana rimovibile)\n    if (coachProfile?.showWatermark !== false) {\n      this.doc.setFont('helvetica', 'italic');\n      this.doc.setFontSize(8);\n      this.doc.setTextColor(150, 150, 150);\n      this.doc.text('Generato con EasyWorkout Planner', this.margin, footerY + 10);\n    }\n    this.doc.setFont('helvetica', 'italic');\n    this.doc.setFontSize(8);\n    this.doc.setTextColor(150, 150, 150);\n    this.doc.text(new Date().toLocaleDateString('it-IT'), this.pageWidth - this.margin, footerY + 10, { align: 'right' });\n  }\n\n  // Tronca il testo aggiungendo un'ellissi se supera la larghezza massima\n  private fitText(text: string, maxWidth: number): string {\n    if (!text) return '';\n    if (this.doc.getTextWidth(text) <= maxWidth) return text;\n    const ellipsis = '…';\n    let start = 0;\n    let end = text.length;\n    let best = '';\n    // Binary search per trovare la lunghezza massima che entra\n    while (start <= end) {\n      const mid = Math.floor((start + end) / 2);\n      const candidate = text.slice(0, mid) + ellipsis;\n      if (this.doc.getTextWidth(candidate) <= maxWidth) {\n        best = candidate;\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    return best || ellipsis;\n  }\n\n  private hexToRgb(hex: string): { r: number; g: number; b: number } {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : { r: 0, g: 0, b: 0 };\n  }\n}\n\nexport const pdfGenerator = new PDFGenerator();\n","size_bytes":18721},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://zjnnfyocvlzpxscrjbcw.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpqbm5meW9jdmx6cHhzY3JqYmN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0NTY4MDMsImV4cCI6MjA2NzAzMjgwM30.VQPItGtVK6QVjYdwL4tEb-6Uizr-aHDE-nxJr3e8s-0';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n","size_bytes":424},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/clients.tsx":{"content":"import { useState } from 'react';\nimport { Plus, Search, User, Mail, Phone, Edit, Trash2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useClients, useCreateClient, useUpdateClient, useDeleteClient } from '@/hooks/use-clients';\nimport { useToast } from '@/hooks/use-toast';\nimport { insertClientSchema, type InsertClient, type Client } from '@shared/schema';\n\nexport default function Clients() {\n  const { data: clients = [], isLoading } = useClients();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  \n  const createClient = useCreateClient();\n  const updateClient = useUpdateClient();\n  const deleteClient = useDeleteClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      notes: ''\n    }\n  });\n\n  const filteredClients = clients.filter(client =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.phone?.includes(searchTerm)\n  );\n\n  const handleSubmit = async (data: InsertClient) => {\n    try {\n      if (editingClient) {\n        await updateClient.mutateAsync({ id: editingClient.id, updates: data });\n        toast({\n          title: \"Cliente aggiornato\",\n          description: \"Le informazioni del cliente sono state aggiornate\"\n        });\n      } else {\n        await createClient.mutateAsync(data);\n        toast({\n          title: \"Cliente creato\",\n          description: \"Il nuovo cliente è stato aggiunto\"\n        });\n      }\n      \n      setIsDialogOpen(false);\n      setEditingClient(null);\n      form.reset();\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile salvare il cliente\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleEdit = (client: Client) => {\n    setEditingClient(client);\n    form.reset({\n      name: client.name,\n      email: client.email || '',\n      phone: client.phone || '',\n      notes: client.notes || ''\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (client: Client) => {\n    if (window.confirm(`Sei sicuro di voler eliminare ${client.name}?`)) {\n      try {\n        await deleteClient.mutateAsync(client.id);\n        toast({\n          title: \"Cliente eliminato\",\n          description: `${client.name} è stato rimosso`\n        });\n      } catch (error) {\n        toast({\n          title: \"Errore\",\n          description: \"Impossibile eliminare il cliente\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const openCreateDialog = () => {\n    setEditingClient(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-8\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"h-40 bg-gray-200 dark:bg-gray-700 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8 gap-4\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2\">\n            Gestione Clienti\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 text-lg\">\n            Aggiungi e gestisci i tuoi clienti\n          </p>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={openCreateDialog} className=\"bg-gradient-primary hover:opacity-90 transition-opacity h-12 px-6 text-lg font-semibold\">\n              <Plus className=\"mr-2\" size={18} />\n              Nuovo Cliente\n            </Button>\n          </DialogTrigger>\n          \n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingClient ? 'Modifica Cliente' : 'Nuovo Cliente'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Nome cliente\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (opzionale)</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"email@esempio.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefono (opzionale)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+39 123 456 7890\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Note (opzionale)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Note aggiuntive sul cliente...\"\n                          rows={3}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex gap-3 pt-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createClient.isPending || updateClient.isPending}\n                    className=\"flex-1 bg-gradient-primary hover:opacity-90 transition-opacity\"\n                  >\n                    {editingClient ? 'Aggiorna' : 'Crea'} Cliente\n                  </Button>\n                  \n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"flex-1\"\n                  >\n                    Annulla\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-8\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n          <Input\n            placeholder=\"Cerca clienti...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\"\n          />\n        </div>\n      </div>\n\n      {/* Clients Grid */}\n      {filteredClients.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredClients.map((client) => (\n            <Card key={client.id} className=\"glass-effect rounded-2xl hover:scale-105 transition-transform duration-300 animate-fade-in\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center mr-3\">\n                      <User className=\"text-white\" size={20} />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                        {client.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        Cliente\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-1\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => handleEdit(client)}\n                      className=\"p-1 text-indigo-500 hover:bg-indigo-50 dark:hover:bg-indigo-900/20\"\n                    >\n                      <Edit size={14} />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => handleDelete(client)}\n                      className=\"p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                    >\n                      <Trash2 size={14} />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {client.email && (\n                    <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                      <Mail size={14} className=\"mr-2\" />\n                      {client.email}\n                    </div>\n                  )}\n                  \n                  {client.phone && (\n                    <div className=\"flex items-center text-sm text-gray-600 dark:text-gray-400\">\n                      <Phone size={14} className=\"mr-2\" />\n                      {client.phone}\n                    </div>\n                  )}\n                  \n                  {client.notes && (\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-3 p-2 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\n                      {client.notes}\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-16\">\n          <div className=\"w-24 h-24 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-6 opacity-50\">\n            <User size={32} className=\"text-white\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n            {searchTerm ? 'Nessun cliente trovato' : 'Nessun cliente ancora'}\n          </h3>\n          <p className=\"text-gray-500 dark:text-gray-400 mb-6\">\n            {searchTerm \n              ? 'Prova a modificare il termine di ricerca'\n              : 'Aggiungi il tuo primo cliente per iniziare'\n            }\n          </p>\n          <Button onClick={openCreateDialog} className=\"bg-gradient-primary hover:opacity-90 transition-opacity\">\n            <Plus className=\"mr-2\" size={16} />\n            Aggiungi Cliente\n          </Button>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":12412},"client/src/pages/home.tsx":{"content":"import { Link } from 'wouter';\nimport { Plus, Upload, Download, Users, Smartphone, Settings, Dumbbell, FileText } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { StatsCards } from '@/components/stats-cards';\nimport { WorkoutCardHome } from '@/components/workout-card-home';\nimport { useWorkouts } from '@/hooks/use-workouts';\nimport { BackupManager } from '@/lib/backup';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRef } from 'react';\n\nexport default function Home() {\n  const { data: workouts = [], isLoading } = useWorkouts();\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const recentWorkouts = workouts.slice(0, 3);\n\n  const handleImport = async (file: File) => {\n    try {\n      await BackupManager.importFromJSON(file);\n      toast({\n        title: \"Importazione completata\",\n        description: \"I dati sono stati importati con successo\"\n      });\n      window.location.reload(); // Refresh to show imported data\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: error instanceof Error ? error.message : \"Errore durante l'importazione\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleBackup = async () => {\n    try {\n      await BackupManager.exportToJSON();\n      BackupManager.setLastBackupDate();\n      toast({\n        title: \"Backup completato\",\n        description: \"I dati sono stati esportati con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile completare il backup\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleInstallApp = async () => {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      toast({\n        title: \"App installabile\",\n        description: \"Usa il menu del browser per installare l'app\"\n      });\n    } else {\n      toast({\n        title: \"Non supportato\",\n        description: \"Il browser non supporta l'installazione PWA\"\n      });\n    }\n  };\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n      {/* Header */}\n      <div className=\"text-center mb-8 md:mb-12\">\n        {/*\n        <h1 className=\"text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4\">\n          EasyWorkOut Plan\n        </h1> */}\n        <p className=\"text-gray-600 dark:text-gray-400 text-lg md:text-xl max-w-2xl mx-auto\">\n          Gestisci i tuoi allenamenti e clienti con facilità. Crea schede personalizzate, esporta dati e molto altro.\n        </p>\n      </div>\n\n      <StatsCards />\n\n      {/* Menu Principale */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Link href=\"/clients\">\n          <Card className=\"glass-effect rounded-2xl hover:scale-105 transition-all duration-300 cursor-pointer group\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Users className=\"text-white\" size={32} />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                Gestione Clienti\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                Aggiungi e gestisci i tuoi clienti\n              </p>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/workouts\">\n          <Card className=\"glass-effect rounded-2xl hover:scale-105 transition-all duration-300 cursor-pointer group\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Dumbbell className=\"text-white\" size={32} />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                Schede Workout\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                Crea e modifica le schede di allenamento\n              </p>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/settings\">\n          <Card className=\"glass-effect rounded-2xl hover:scale-105 transition-all duration-300 cursor-pointer group\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Settings className=\"text-white\" size={32} />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                Impostazioni\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                Configura profilo coach e export\n              </p>\n            </CardContent>\n          </Card>\n        </Link>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Quick Create Workout */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"glass-effect rounded-2xl animate-fade-in\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-900 dark:text-white flex items-center text-xl\">\n                <Plus className=\"mr-2\" size={24} />\n                Crea Nuova Scheda\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/workouts\">\n                <Button className=\"w-full h-14 bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white text-lg font-semibold\">\n                  <Plus className=\"mr-2\" size={20} />\n                  Inizia a Creare\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"lg:col-span-1\">\n          {/* Recent Workouts */}\n          <Card className=\"glass-effect rounded-2xl mb-6 animate-fade-in\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Schede Recenti\n              </h3>\n              \n              {isLoading ? (\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"h-20 bg-gray-200 dark:bg-gray-700 rounded-xl animate-pulse\" />\n                  ))}\n                </div>\n              ) : recentWorkouts.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {recentWorkouts.map((workout) => (\n                    <WorkoutCardHome key={workout.id} workout={workout} />\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-gray-500 dark:text-gray-400 text-sm text-center py-8\">\n                  Nessuna scheda creata ancora\n                </p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"glass-effect rounded-2xl mb-6 animate-fade-in\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Azioni Rapide\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"w-full p-3 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/30 dark:to-purple-900/30 border border-indigo-200 dark:border-indigo-700 hover:from-indigo-100 hover:to-purple-100 dark:hover:from-indigo-800/40 dark:hover:to-purple-800/40 text-left justify-start h-auto\"\n                  variant=\"ghost\"\n                >\n                  <Upload className=\"text-indigo-500 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                      Importa Dati\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Da file JSON\n                    </p>\n                  </div>\n                </Button>\n\n                <Button\n                  onClick={handleBackup}\n                  className=\"w-full p-3 bg-gradient-to-r from-emerald-50 to-teal-50 dark:from-emerald-900/30 dark:to-teal-900/30 border border-emerald-200 dark:border-emerald-700 hover:from-emerald-100 hover:to-teal-100 dark:hover:from-emerald-800/40 dark:hover:to-teal-800/40 text-left justify-start h-auto\"\n                  variant=\"ghost\"\n                >\n                  <Download className=\"text-emerald-500 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                      Backup Dati\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Esporta tutto\n                    </p>\n                  </div>\n                </Button>\n\n                <Link href=\"/clients\">\n                  <Button\n                    className=\"w-full p-3 bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/30 dark:to-red-900/30 border border-orange-200 dark:border-orange-700 hover:from-orange-100 hover:to-red-100 dark:hover:from-orange-800/40 dark:hover:to-red-800/40 text-left justify-start h-auto\"\n                    variant=\"ghost\"\n                  >\n                    <Users className=\"text-orange-500 mr-3\" size={20} />\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                        Gestisci Clienti\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Aggiungi/Modifica\n                      </p>\n                    </div>\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n\n        </div>\n      </div>\n\n\n\n      {/* Hidden file input for import */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".json\"\n        onChange={(e) => {\n          const file = e.target.files?.[0];\n          if (file) {\n            handleImport(file);\n          }\n        }}\n        className=\"hidden\"\n      />\n    </main>\n  );\n}\n","size_bytes":10722},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reset-password.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/lib/supabase';\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [newPassword, setNewPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleReset = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newPassword || newPassword.length < 6) {\n      toast({ \n        title: 'Password troppo corta', \n        description: 'Inserisci almeno 6 caratteri',\n        variant: 'destructive' \n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { error } = await supabase.auth.updateUser({ \n        password: newPassword \n      });\n      \n      if (error) throw error;\n      \n      toast({ \n        title: 'Password aggiornata', \n        description: 'Puoi ora accedere con la nuova password' \n      });\n      \n      setLocation('/');\n    } catch (err: any) {\n      toast({ \n        title: 'Errore', \n        description: err?.message || 'Impossibile aggiornare la password',\n        variant: 'destructive' \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container max-w-md mx-auto mt-10 p-6\">\n      <h1 className=\"text-2xl font-bold mb-6\">Reimposta Password</h1>\n      <form onSubmit={handleReset} className=\"space-y-4\">\n        <Input\n          type=\"password\"\n          placeholder=\"Nuova password\"\n          value={newPassword}\n          onChange={(e) => setNewPassword(e.target.value)}\n          required\n        />\n        <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n          {loading ? 'Aggiornamento...' : 'Salva nuova password'}\n        </Button>\n      </form>\n    </div>\n  );\n}","size_bytes":1939},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Save, Upload, Download, Trash2, User, Camera, Instagram, Facebook, Globe, FileText, Folder, Palette, Eye, EyeOff, Type } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useCoachProfile, useCreateCoachProfile, useUpdateCoachProfile } from '@/hooks/use-clients';\nimport { BackupManager } from '@/lib/backup';\nimport { dbOps } from '@/lib/database';\nimport { useToast } from '@/hooks/use-toast';\nimport { insertCoachProfileSchema, type InsertCoachProfile } from '@shared/schema';\nimport { useRef } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { processImageForUpload } from '@/lib/image-utils';\n\nexport default function Settings() {\n  const { data: coachProfile, isLoading } = useCoachProfile();\n  const createCoachProfile = useCreateCoachProfile();\n  const updateCoachProfile = useUpdateCoachProfile();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const logoInputRef = useRef<HTMLInputElement>(null);\n  const [backupStats, setBackupStats] = useState<{\n    workoutsCount: number;\n    clientsCount: number;\n    lastBackup?: Date;\n  } | null>(null);\n\n  const form = useForm<InsertCoachProfile>({\n    resolver: zodResolver(insertCoachProfileSchema),\n    defaultValues: {\n      name: coachProfile?.name || '',\n      email: coachProfile?.email || '',\n      phone: coachProfile?.phone || '',\n      bio: coachProfile?.bio || '',\n      logo: coachProfile?.logo || '',\n      instagram: coachProfile?.instagram || '',\n      facebook: coachProfile?.facebook || '',\n      website: coachProfile?.website || '',\n      exportPath: coachProfile?.exportPath || '',\n      pdfLineColor: coachProfile?.pdfLineColor || '#000000',\n      pdfTextColor: coachProfile?.pdfTextColor || '#4F46E5',\n      showWatermark: coachProfile?.showWatermark ?? true,\n      useWorkoutNameAsTitle: coachProfile?.useWorkoutNameAsTitle ?? false\n    }\n  });\n\n  // Update form when coach profile loads\n  useEffect(() => {\n    if (coachProfile) {\n      form.reset({\n        name: coachProfile.name,\n        email: coachProfile.email || '',\n        phone: coachProfile.phone || '',\n        bio: coachProfile.bio || '',\n        logo: coachProfile.logo || '',\n        instagram: coachProfile.instagram || '',\n        facebook: coachProfile.facebook || '',\n        website: coachProfile.website || '',\n        exportPath: coachProfile.exportPath || '',\n        pdfLineColor: coachProfile.pdfLineColor || '#000000',\n        pdfTextColor: coachProfile.pdfTextColor || '#4F46E5',\n        showWatermark: coachProfile.showWatermark ?? true,\n        useWorkoutNameAsTitle: coachProfile.useWorkoutNameAsTitle ?? false\n      });\n    }\n  }, [coachProfile, form]);\n\n  // Load backup stats on mount\n  useEffect(() => {\n    BackupManager.getBackupStats().then(setBackupStats);\n  }, []);\n\n  const handleSaveProfile = async (data: InsertCoachProfile) => {\n    try {\n      if (coachProfile) {\n        // Aggiorna direttamente nel database locale\n        await dbOps.updateCoachProfile(coachProfile.id, data);\n        toast({\n          title: \"Profilo aggiornato\",\n          description: \"Le modifiche sono state salvate e rimarranno visibili\"\n        });\n      } else {\n        // Crea nuovo profilo nel database locale\n        await dbOps.createCoachProfile(data);\n        toast({\n          title: \"Profilo creato\",\n          description: \"Il profilo è stato salvato e rimarrà visibile\"\n        });\n      }\n      \n      // Ricarica la pagina automaticamente dopo il salvataggio\n      window.location.reload();\n    } catch (error) {\n      console.error('Errore nel salvataggio:', error);\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile salvare il profilo\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleLogoUpload = async (file: File) => {\n    try {\n      const logoBase64 = await processImageForUpload(file, 400, 400);\n      form.setValue('logo', logoBase64);\n      toast({\n        title: \"Logo caricato\",\n        description: \"Il logo è stato caricato con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: error instanceof Error ? error.message : \"Impossibile caricare il logo\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleBackup = async () => {\n    try {\n      await BackupManager.exportToJSON();\n      BackupManager.setLastBackupDate();\n      \n      // Update backup stats\n      const stats = await BackupManager.getBackupStats();\n      setBackupStats(stats);\n      \n      toast({\n        title: \"Backup completato\",\n        description: \"I dati sono stati esportati con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile completare il backup\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n\n  const handleImport = async (file: File) => {\n    try {\n      await BackupManager.importFromJSON(file);\n      \n      // Update backup stats\n      const stats = await BackupManager.getBackupStats();\n      setBackupStats(stats);\n      \n      toast({\n        title: \"Importazione completata\",\n        description: \"I dati sono stati importati con successo\"\n      });\n      \n      // Refresh the page to show imported data\n      setTimeout(() => window.location.reload(), 1000);\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: error instanceof Error ? error.message : \"Errore durante l'importazione\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleClearData = async () => {\n    if (window.confirm('Sei sicuro di voler cancellare tutti i dati? Questa azione non può essere annullata.')) {\n      try {\n        await dbOps.clearAllData();\n        \n        // Update backup stats\n        const stats = await BackupManager.getBackupStats();\n        setBackupStats(stats);\n        \n        toast({\n          title: \"Dati cancellati\",\n          description: \"Tutti i dati sono stati rimossi\"\n        });\n        \n        // Refresh the page\n        setTimeout(() => window.location.reload(), 1000);\n      } catch (error) {\n        toast({\n          title: \"Errore\",\n          description: \"Impossibile cancellare i dati\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  return (\n    <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n      <div className=\"mb-8 md:mb-12\">\n        <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n          Impostazioni\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400 text-lg md:text-xl\">\n          Configura il tuo profilo coach e le preferenze dell'app\n        </p>\n      </div>\n\n      <div className=\"space-y-8 lg:space-y-12\">\n        {/* Coach Profile */}\n        <Card className=\"glass-effect rounded-2xl animate-fade-in\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <User className=\"mr-2 text-indigo-500\" size={20} />\n              Profilo Coach\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSaveProfile)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nome</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Il tuo nome\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email (opzionale)</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"email@esempio.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefono (opzionale)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+39 123 456 7890\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Logo Upload */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-200\">\n                    Logo (opzionale)\n                  </label>\n                  <div className=\"flex items-center gap-4\">\n                    {form.watch('logo') && (\n                      <div className=\"relative\">\n                        <img \n                          src={form.watch('logo')} \n                          alt=\"Logo\" \n                          className=\"w-16 h-16 object-cover rounded-lg border border-gray-200 dark:border-gray-700\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                          onClick={() => form.setValue('logo', '')}\n                        >\n                          ×\n                        </Button>\n                      </div>\n                    )}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => logoInputRef.current?.click()}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Camera size={16} />\n                      {form.watch('logo') ? 'Cambia Logo' : 'Carica Logo'}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Social Media Section */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white flex items-center gap-2\">\n                    <Globe size={20} className=\"text-indigo-500\" />\n                    Social Media & Contatti\n                  </h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"instagram\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Instagram size={16} className=\"text-pink-500\" />\n                            Instagram (opzionale)\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"@nomeutente o URL completo\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"facebook\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"flex items-center gap-2\">\n                            <Facebook size={16} className=\"text-blue-600\" />\n                            Facebook (opzionale)\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Nome pagina o URL completo\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"website\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Globe size={16} className=\"text-green-600\" />\n                          Sito Web (opzionale)\n                        </FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://www.tuosito.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Export Settings */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white flex items-center gap-2\">\n                    <FileText size={20} className=\"text-purple-500\" />\n                    Impostazioni Export\n                  </h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"exportPath\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <Folder size={16} className=\"text-purple-500\" />\n                          Cartella Export PDF (opzionale)\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"(default: Downloads)\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          Lascia vuoto per usare la cartella Downloads di default\n                        </p>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {/* Personalizzazione PDF */}\n                  <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4 flex items-center gap-2\">\n                      <Palette size={18} className=\"text-emerald-500\" />\n                      Personalizzazione PDF\n                    </h4>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"pdfLineColor\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Palette size={14} className=\"text-emerald-500\" />\n                              Colore Linee PDF\n                            </FormLabel>\n                            <FormControl>\n                              <div className=\"flex items-center gap-2\">\n                                <Input \n                                  type=\"color\" \n                                  {...field} \n                                  className=\"w-16 h-10 p-1 rounded border cursor-pointer\"\n                                />\n                                <Input \n                                  type=\"text\"\n                                  placeholder=\"#000000\"\n                                  {...field}\n                                  className=\"flex-1\"\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              Colore delle linee e dei bordi nei PDF esportati\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"pdfTextColor\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Type size={14} className=\"text-emerald-500\" />\n                              Colore Titoli PDF\n                            </FormLabel>\n                            <FormControl>\n                              <div className=\"flex items-center gap-2\">\n                                <Input \n                                  type=\"color\" \n                                  {...field} \n                                  className=\"w-16 h-10 p-1 rounded border cursor-pointer\"\n                                />\n                                <Input \n                                  type=\"text\"\n                                  placeholder=\"#4F46E5\"\n                                  {...field}\n                                  className=\"flex-1\"\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              Colore dei titoli delle sezioni nei PDF (DESCRIZIONE, PROGRESSIONE SETTIMANALE, ecc.)\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <div className=\"mt-4 space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"useWorkoutNameAsTitle\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4 space-y-0\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"flex items-center gap-2\">\n                                <Type size={14} className=\"text-purple-500\" />\n                                Usa Nome Scheda come Titolo\n                              </FormLabel>\n                              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                Se attivato, usa il nome della scheda al posto di \"SCHEDA DI ALLENAMENTO\" nei PDF\n                              </p>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"showWatermark\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4 space-y-0\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"flex items-center gap-2\">\n                                {field.value ? <Eye size={14} className=\"text-blue-500\" /> : <EyeOff size={14} className=\"text-gray-400\" />}\n                                Scritta \"Generato con EasyWorkout Planner\"\n                              </FormLabel>\n                              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                Mostra/nascondi la piccola scritta in basso nei PDF\n                              </p>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"bio\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Biografia (opzionale)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Scrivi qualcosa su di te...\"\n                          rows={4}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  disabled={createCoachProfile.isPending || updateCoachProfile.isPending}\n                  className=\"w-full md:w-auto bg-gradient-primary hover:opacity-90 transition-opacity\"\n                >\n                  <Save className=\"mr-2\" size={16} />\n                  Salva Profilo\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Data Management */}\n        <Card className=\"glass-effect rounded-2xl animate-fade-in\">\n          <CardHeader>\n            <CardTitle>Gestione Dati</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Backup Stats */}\n            {backupStats && (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {backupStats.workoutsCount}\n                  </p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Schede</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {backupStats.clientsCount}\n                  </p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Clienti</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {backupStats.lastBackup \n                      ? `Ultimo backup: ${backupStats.lastBackup.toLocaleDateString('it-IT')}`\n                      : 'Nessun backup'\n                    }\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Azioni Backup/Cloud */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button\n                onClick={handleBackup}\n                className=\"h-auto p-4 bg-gradient-to-r from-emerald-50 to-teal-50 dark:from-emerald-900/30 dark:to-teal-900/30 border border-emerald-200 dark:border-emerald-700 hover:from-emerald-100 hover:to-teal-100 dark:hover:from-emerald-800/40 dark:hover:to-teal-800/40 text-left justify-start\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center w-full\">\n                  <Download className=\"text-emerald-500 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                      Esporta Backup\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Salva tutti i dati\n                    </p>\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                onClick={() => fileInputRef.current?.click()}\n                className=\"h-auto p-4 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-900/30 dark:to-purple-900/30 border border-indigo-200 dark:border-indigo-700 hover:from-indigo-100 hover:to-purple-100 dark:hover:from-indigo-800/40 dark:hover:to-purple-800/40 text-left justify-start\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center w-full\">\n                  <Upload className=\"text-indigo-500 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                      Importa Backup\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Ripristina da file\n                    </p>\n                  </div>\n                </div>\n              </Button>\n\n              {/* Carica in Cloud (sovrascrive) */}\n              <Button\n                onClick={async () => {\n                  if (!user) {\n                    toast({ title: 'Serve un account', description: 'Crea o accedi per usare il cloud', variant: 'destructive' });\n                    return;\n                  }\n                  if (!window.confirm('Il backup remoto verrà reimpiazzato con i dati attuali, è consigliato prima caricare i dati dal cloud. Procedere?')) return;\n                  try {\n                    await BackupManager.exportToSupabaseStorage();\n                    const stats = await BackupManager.getBackupStats();\n                    setBackupStats(stats);\n                    toast({ title: 'Caricato in cloud', description: 'Backup remoto aggiornato.' });\n                  } catch (error) {\n                    toast({ title: 'Errore', description: 'Impossibile caricare in cloud', variant: 'destructive' });\n                  }\n                }}\n                className=\"h-auto p-4 text-left justify-start rounded-xl relative bg-sky-100 dark:bg-sky-900/30 border-2 border-yellow-500 hover:bg-sky-200 dark:hover:bg-sky-800/40 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center w-full\">\n                  <Upload className=\"text-sky-700 dark:text-sky-300 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-semibold text-gray-900 dark:text-white text-sm\">\n                      Carica in Cloud\n                    </p>\n                    <p className=\"text-xs text-gray-700 dark:text-gray-300\">\n                      Sostituisci i dati nel cloud\n                    </p>\n                  </div>\n                </div>\n              </Button>\n\n              {/* Carica dal Cloud (sostituisce) */}\n              <Button\n                onClick={async () => {\n                  if (!user) {\n                    toast({ title: 'Serve un account', description: 'Crea un account o accedi per usare il cloud', variant: 'destructive' });\n                    return;\n                  }\n                  if (!window.confirm('I dati locali verranno completamente sostituiti con quelli dal cloud. Procedere?')) return;\n                  try {\n                    await BackupManager.mergeFromSupabaseStorage();\n                    const stats = await BackupManager.getBackupStats();\n                    setBackupStats(stats);\n                    toast({ title: 'Dati caricati', description: 'Dati dal cloud caricati con successo.' });\n                    setTimeout(() => window.location.reload(), 500);\n                  } catch (error) {\n                    toast({ title: 'Errore', description: 'Impossibile caricare dal cloud', variant: 'destructive' });\n                  }\n                }}\n                className=\"h-auto p-4 text-left justify-start rounded-xl relative bg-sky-100 dark:bg-sky-900/30 border-2 border-yellow-500 hover:bg-sky-200 dark:hover:bg-sky-800/40 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center w-full\">\n                  <Download className=\"text-sky-700 dark:text-sky-300 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-semibold text-gray-900 dark:text-white text-sm\">\n                      Carica dal Cloud\n                    </p>\n                    <p className=\"text-xs text-gray-700 dark:text-gray-300\">\n                      Sostituisci dati locali con quelli del cloud\n                    </p>\n                  </div>\n                </div>\n              </Button>\n\n              <Button\n                onClick={handleClearData}\n                className=\"h-auto p-4 bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/30 dark:to-pink-900/30 border border-red-200 dark:border-red-700 hover:from-red-100 hover:to-pink-100 dark:hover:from-red-800/40 dark:hover:to-pink-800/40 text-left justify-start\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center w-full\">\n                  <Trash2 className=\"text-red-500 mr-3\" size={20} />\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                      Cancella Tutto\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Rimuovi tutti i dati\n                    </p>\n                  </div>\n                </div>\n              </Button>\n            </div>\n\n            {/* Pulsanti cloud espliciti: nessun salvataggio automatico */}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Hidden file inputs */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".json\"\n        onChange={(e) => {\n          const file = e.target.files?.[0];\n          if (file) {\n            handleImport(file);\n          }\n        }}\n        className=\"hidden\"\n      />\n      \n      <input\n        ref={logoInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) => {\n          const file = e.target.files?.[0];\n          if (file) {\n            handleLogoUpload(file);\n          }\n        }}\n        className=\"hidden\"\n      />\n    </main>\n  );\n}\n","size_bytes":31381},"client/src/pages/workout-detail.tsx":{"content":"import { useParams, useLocation, Link } from 'wouter';\nimport { useState } from 'react';\nimport { ArrowLeft, Edit, Copy, FileText, Save, Plus, Calendar } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useWorkout, useUpdateWorkout } from '@/hooks/use-workouts';\nimport { useCoachProfile } from '@/hooks/use-clients';\nimport { useToast } from '@/hooks/use-toast';\nimport { pdfGenerator } from '@/lib/pdf-generator';\nimport { formatDistanceToNow } from 'date-fns';\nimport { it } from 'date-fns/locale';\nimport type { Workout, Day, Exercise } from '@shared/schema';\n\nexport default function WorkoutDetail() {\n  const params = useParams();\n  const workoutId = params.id as string;\n  const [, setLocation] = useLocation();\n  const { data: workout, isLoading } = useWorkout(workoutId);\n  const { data: coachProfile } = useCoachProfile();\n  const updateWorkout = useUpdateWorkout();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedWorkout, setEditedWorkout] = useState<Workout | null>(null);\n\n  if (isLoading || !workout) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-8\"></div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-40 bg-gray-200 dark:bg-gray-700 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n  const handleEdit = () => {\n    setEditedWorkout({ ...workout });\n    setIsEditing(true);\n  };\n\n  const handleSave = async () => {\n    if (!editedWorkout) return;\n    \n    try {\n      await updateWorkout.mutateAsync({\n        id: workout.id,\n        updates: {\n          ...editedWorkout,\n          updatedAt: new Date()\n        }\n      });\n      \n      toast({\n        title: \"Scheda aggiornata\",\n        description: \"Le modifiche sono state salvate con successo\"\n      });\n      \n      setIsEditing(false);\n      setEditedWorkout(null);\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile salvare le modifiche\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setEditedWorkout(null);\n  };\n\n  const handleExportPDF = async () => {\n    try {\n      const blob = await pdfGenerator.generateWorkoutPDF(workout, coachProfile);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `scheda-${workout.clientName.replace(/\\s+/g, '-').toLowerCase()}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      // Update export count\n      const currentCount = parseInt(localStorage.getItem('exportedPDFs') || '0');\n      localStorage.setItem('exportedPDFs', (currentCount + 1).toString());\n\n      toast({\n        title: \"PDF esportato\",\n        description: \"Il PDF è stato scaricato con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile esportare il PDF\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const currentWorkout = isEditing ? editedWorkout : workout;\n  const timeAgo = formatDistanceToNow(workout.updatedAt, {\n    addSuffix: true,\n    locale: it\n  });\n\n  // Early return if currentWorkout is not available\n  if (!currentWorkout) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-8\"></div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-40 bg-gray-200 dark:bg-gray-700 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        {/* Desktop Header */}\n        <div className=\"hidden md:flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/workouts\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"glass-effect\">\n                <ArrowLeft size={16} className=\"mr-2\" />\n                Indietro\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                {currentWorkout.clientName}\n              </h1>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                {currentWorkout.workoutType} • {currentWorkout.duration} settimane • {timeAgo}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-2\">\n            {isEditing ? (\n              <>\n                <Button onClick={handleSave} disabled={updateWorkout.isPending} className=\"bg-emerald-500 hover:bg-emerald-600\">\n                  <Save size={16} className=\"mr-2\" />\n                  Salva\n                </Button>\n                <Button onClick={handleCancel} variant=\"outline\">\n                  Annulla\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button onClick={handleEdit} className=\"bg-indigo-500 hover:bg-indigo-600\">\n                  <Edit size={16} className=\"mr-2\" />\n                  Modifica\n                </Button>\n                <Button onClick={handleExportPDF} className=\"bg-orange-500 hover:bg-orange-600\">\n                  <FileText size={16} className=\"mr-2\" />\n                  Esporta PDF\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile Header - Stack Layout */}\n        <div className=\"md:hidden space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/workouts\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"glass-effect\">\n                <ArrowLeft size={16} className=\"mr-2\" />\n                Indietro\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n              {currentWorkout.clientName}\n            </h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-4\">\n              {currentWorkout.workoutType} • {currentWorkout.duration} settimane\n            </p>\n            <p className=\"text-xs text-gray-400 dark:text-gray-500 mb-4\">\n              {timeAgo}\n            </p>\n          </div>\n\n          <div className=\"flex flex-col space-y-2\">\n            {isEditing ? (\n              <>\n                <Button \n                  onClick={handleSave} \n                  disabled={updateWorkout.isPending} \n                  className=\"w-full bg-emerald-500 hover:bg-emerald-600\"\n                >\n                  <Save size={16} className=\"mr-2\" />\n                  Salva Modifiche\n                </Button>\n                <Button onClick={handleCancel} variant=\"outline\" className=\"w-full\">\n                  Annulla\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button onClick={handleEdit} className=\"w-full bg-indigo-500 hover:bg-indigo-600\">\n                  <Edit size={16} className=\"mr-2\" />\n                  Modifica Scheda\n                </Button>\n                <Button onClick={handleExportPDF} className=\"w-full bg-orange-500 hover:bg-orange-600\">\n                  <FileText size={16} className=\"mr-2\" />\n                  Esporta PDF\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Basic Info */}\n      <Card className=\"glass-effect rounded-2xl mb-8 animate-fade-in\">\n        <CardHeader>\n          <CardTitle>Informazioni Generali</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Coach\n            </label>\n            {isEditing ? (\n              <Input\n                value={currentWorkout.coachName}\n                onChange={(e) => setEditedWorkout({ ...currentWorkout, coachName: e.target.value })}\n                className=\"glass-effect bg-white/50 dark:bg-gray-800/50\"\n              />\n            ) : (\n              <p className=\"text-gray-900 dark:text-white\">{currentWorkout.coachName}</p>\n            )}\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Tipo di Scheda\n            </label>\n            {isEditing ? (\n              <Input\n                value={currentWorkout.workoutType}\n                onChange={(e) => setEditedWorkout({ ...currentWorkout, workoutType: e.target.value })}\n                className=\"glass-effect bg-white/50 dark:bg-gray-800/50\"\n              />\n            ) : (\n              <p className=\"text-gray-900 dark:text-white\">{currentWorkout.workoutType}</p>\n            )}\n          </div>\n\n          <div className=\"md:col-span-2\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Descrizione\n            </label>\n            {isEditing ? (\n              <Textarea\n                value={currentWorkout.description || ''}\n                onChange={(e) => setEditedWorkout({ ...currentWorkout, description: e.target.value })}\n                rows={3}\n                className=\"glass-effect bg-white/50 dark:bg-gray-800/50\"\n              />\n            ) : (\n              <p className=\"text-gray-900 dark:text-white\">{currentWorkout.description || 'Nessuna descrizione'}</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Weekly Progression */}\n      <Card className=\"glass-effect rounded-2xl mb-8 animate-fade-in\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Calendar className=\"mr-2 text-indigo-500\" size={20} />\n            Progressione Settimanale\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {(currentWorkout.weeks || []).map((week) => (\n              <div key={week.id} className=\"border border-gray-200 dark:border-gray-600 rounded-xl p-4 bg-white/20 dark:bg-gray-800/20\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-lg text-gray-900 dark:text-white\">\n                    Settimana {week.number}\n                  </h3>\n                </div>\n\n                {week.notes && (\n                  <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <p className=\"text-sm text-blue-800 dark:text-blue-200\">{week.notes}</p>\n                  </div>\n                )}\n\n                <div className=\"space-y-4\">\n                  {(week.days || []).map((day) => (\n                    <div key={day.id} className=\"border border-gray-100 dark:border-gray-700 rounded-lg p-3 bg-white/30 dark:bg-gray-900/30\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white mb-3\">\n                        {day.name}\n                      </h4>\n\n                      {day.notes && (\n                        <div className=\"mb-3 p-2 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">{day.notes}</p>\n                        </div>\n                      )}\n\n                      {(day.exercises || []).length > 0 ? (\n                        <>\n                          {/* Desktop Table View */}\n                          <div className=\"hidden md:block overflow-x-auto\">\n                            <table className=\"w-full text-sm table-fixed\">\n                              <thead>\n                                <tr className=\"border-b border-gray-200 dark:border-gray-600\">\n                                  <th className=\"text-left py-2 px-2 font-medium text-gray-700 dark:text-gray-300 w-1/2\">Esercizio</th>\n                                  <th className=\"text-left py-2 px-2 font-medium text-gray-700 dark:text-gray-300 w-16\">Serie</th>\n                                  <th className=\"text-left py-2 px-2 font-medium text-gray-700 dark:text-gray-300 w-20\">Reps</th>\n                                  <th className=\"text-left py-2 px-2 font-medium text-gray-700 dark:text-gray-300 w-24\">Carico</th>\n                                  <th className=\"text-left py-2 px-2 font-medium text-gray-700 dark:text-gray-300 w-28\">Recupero</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {(day.exercises || []).map((exercise) => (\n                                  <tr key={exercise.id} className=\"border-b border-gray-100 dark:border-gray-700\">\n                                    <td className=\"py-2 px-2 align-top\">\n                                      <div className=\"flex items-start space-x-2 min-w-0\">\n                                        {exercise.imageUrl && (\n                                          <img \n                                            src={exercise.imageUrl} \n                                            alt=\"Exercise\" \n                                            className=\"w-8 h-8 object-cover rounded\"\n                                          />\n                                        )}\n                                        <span className=\"text-gray-900 dark:text-white break-words whitespace-normal block min-w-0\">{exercise.name}</span>\n                                      </div>\n                                    </td>\n                                    <td className=\"py-2 px-2 text-gray-700 dark:text-gray-300 break-words whitespace-normal align-top\">{exercise.sets}</td>\n                                    <td className=\"py-2 px-2 text-gray-700 dark:text-gray-300 break-words whitespace-normal align-top\">{exercise.reps}</td>\n                                    <td className=\"py-2 px-2 text-gray-700 dark:text-gray-300 break-words whitespace-normal align-top\">{exercise.load || '-'}</td>\n                                    <td className=\"py-2 px-2 text-gray-700 dark:text-gray-300 break-words whitespace-normal align-top\">{exercise.rest || '-'}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n\n                          {/* Mobile Card View */}\n                          <div className=\"md:hidden space-y-3\">\n                            {(day.exercises || []).map((exercise) => (\n                              <div key={exercise.id} className=\"bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3 space-y-2\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {exercise.imageUrl && (\n                                    <img \n                                      src={exercise.imageUrl} \n                                      alt=\"Exercise\" \n                                      className=\"w-10 h-10 object-cover rounded\"\n                                    />\n                                  )}\n                                  <h5 className=\"font-medium text-gray-900 dark:text-white text-sm\">{exercise.name}</h5>\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                                  <div>\n                                    <span className=\"font-medium text-gray-600 dark:text-gray-400\">Serie:</span>\n                                    <span className=\"ml-1 text-gray-900 dark:text-white\">{exercise.sets}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium text-gray-600 dark:text-gray-400\">Reps:</span>\n                                    <span className=\"ml-1 text-gray-900 dark:text-white\">{exercise.reps}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium text-gray-600 dark:text-gray-400\">Carico:</span>\n                                    <span className=\"ml-1 text-gray-900 dark:text-white\">{exercise.load || '-'}</span>\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium text-gray-600 dark:text-gray-400\">Recupero:</span>\n                                    <span className=\"ml-1 text-gray-900 dark:text-white\">{exercise.rest || '-'}</span>\n                                  </div>\n                                </div>\n                                {exercise.notes && (\n                                  <div className=\"pt-1 border-t border-gray-200 dark:border-gray-600\">\n                                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">{exercise.notes}</p>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </>\n                      ) : (\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center py-4\">\n                          Nessun esercizio per questo giorno\n                        </p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Dietary Advice */}\n      {currentWorkout.dietaryAdvice && (\n        <Card className=\"glass-effect rounded-2xl animate-fade-in\">\n          <CardHeader>\n            <CardTitle>Consigli Dietistici</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isEditing ? (\n              <Textarea\n                value={currentWorkout.dietaryAdvice}\n                onChange={(e) => setEditedWorkout({ ...currentWorkout, dietaryAdvice: e.target.value })}\n                rows={4}\n                className=\"glass-effect bg-white/50 dark:bg-gray-800/50\"\n              />\n            ) : (\n              <p className=\"text-gray-700 dark:text-gray-300 whitespace-pre-wrap\">\n                {currentWorkout.dietaryAdvice}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </main>\n  );\n}","size_bytes":19061},"client/src/pages/workouts.tsx":{"content":"import { useState } from 'react';\nimport { Plus, Search, Filter } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { WorkoutCard } from '@/components/workout-card';\nimport { WorkoutBuilder } from '@/components/workout-builder';\nimport { useWorkouts, useCreateWorkout } from '@/hooks/use-workouts';\nimport { useToast } from '@/hooks/use-toast';\nimport { workoutTypes, type Workout } from '@shared/schema';\n\nexport default function Workouts() {\n  const { data: workouts = [], isLoading } = useWorkouts();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingWorkout, setEditingWorkout] = useState<Workout | null>(null);\n  const createWorkout = useCreateWorkout();\n  const { toast } = useToast();\n\n  const filteredWorkouts = workouts.filter(workout => {\n    const matchesSearch = \n      workout.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (workout.level?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) || //DA DEBUGGARE\n      workout.workoutType.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterType === 'all' || workout.workoutType === filterType;\n    \n    return matchesSearch && matchesType;\n  });\n\n  const handleEditWorkout = (workout: Workout) => {\n    setEditingWorkout(workout);\n  };\n\n  const handleDuplicateWorkout = async (workout: Workout) => {\n    try {\n      const duplicatedWorkout = {\n        ...workout,\n        clientName: `${workout.clientName} (Copia)`,\n        weeks: workout.weeks.map(week => ({\n          ...week,\n          id: crypto.randomUUID(),\n          days: week.days.map(day => ({\n            ...day,\n            id: crypto.randomUUID(),\n            exercises: day.exercises.map(exercise => ({\n              ...exercise,\n              id: crypto.randomUUID()\n            }))\n          }))\n        }))\n      };\n      delete (duplicatedWorkout as any).id;\n      delete (duplicatedWorkout as any).createdAt;\n      delete (duplicatedWorkout as any).updatedAt;\n      \n      await createWorkout.mutateAsync(duplicatedWorkout);\n      toast({\n        title: \"Scheda duplicata\",\n        description: \"La scheda è stata copiata con successo\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Impossibile duplicare la scheda\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleCloseDialogs = () => {\n    setShowCreateDialog(false);\n    setEditingWorkout(null);\n  };\n\n  if (isLoading) {\n    return (\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mb-8\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-mobile-nav\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8 gap-4\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-2\">\n            Schede di Allenamento\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 text-lg\">\n            Gestisci e organizza le tue schede workout\n          </p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-gradient-primary hover:opacity-90 transition-opacity h-12 px-6 text-lg font-semibold\">\n              <Plus className=\"mr-2\" size={18} />\n              Nuova Scheda\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Crea Nuova Scheda</DialogTitle>\n            </DialogHeader>\n            <WorkoutBuilder onSuccess={() => setShowCreateDialog(false)} />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Edit Dialog */}\n      {editingWorkout && (\n        <Dialog open={!!editingWorkout} onOpenChange={() => setEditingWorkout(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Modifica Scheda - {editingWorkout.clientName}</DialogTitle>\n            </DialogHeader>\n            <WorkoutBuilder existingWorkout={editingWorkout} onSuccess={() => setEditingWorkout(null)} />\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Search and Filter */}\n      <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n          <Input\n            placeholder=\"Cerca per cliente, coach o tipo...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\"\n          />\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Filter className=\"text-gray-400\" size={16} />\n          <Select value={filterType} onValueChange={setFilterType}>\n            <SelectTrigger className=\"w-full md:w-48 glass-effect bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n              <SelectValue placeholder=\"Filtra per tipo\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tutti i tipi</SelectItem>\n              {workoutTypes.map((type) => (\n                <SelectItem key={type} value={type}>\n                  {type}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Workouts Grid */}\n      {filteredWorkouts.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredWorkouts.map((workout) => (\n            <div key={workout.id} className=\"glass-effect rounded-2xl p-2\">\n              <WorkoutCard \n                workout={workout}\n                onEdit={handleEditWorkout}\n                onDuplicate={handleDuplicateWorkout}\n              />\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-16\">\n          <div className=\"w-24 h-24 bg-gradient-primary rounded-full flex items-center justify-center mx-auto mb-6 opacity-50\">\n            <Plus size={32} className=\"text-white\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n            {searchTerm || filterType !== 'all' ? 'Nessun risultato' : 'Nessuna scheda ancora'}\n          </h3>\n          <p className=\"text-gray-500 dark:text-gray-400 mb-6\">\n            {searchTerm || filterType !== 'all' \n              ? 'Prova a modificare i filtri di ricerca'\n              : 'Crea la tua prima scheda di allenamento'\n            }\n          </p>\n          <Button\n            className=\"bg-gradient-primary hover:opacity-90 transition-opacity\"\n            onClick={() => setShowCreateDialog(true)}\n          >\n            <Plus className=\"mr-2\" size={16} />\n            Crea Nuova Scheda\n          </Button>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":7844},"ios/App/App/AppDelegate.swift":{"content":"import UIKit\nimport Capacitor\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n\n    func applicationWillResignActive(_ application: UIApplication) {\n        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.\n    }\n\n    func applicationDidEnterBackground(_ application: UIApplication) {\n        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.\n        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    }\n\n    func applicationWillEnterForeground(_ application: UIApplication) {\n        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.\n    }\n\n    func applicationDidBecomeActive(_ application: UIApplication) {\n        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.\n    }\n\n    func applicationWillTerminate(_ application: UIApplication) {\n        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.\n    }\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        // Called when the app was launched with a url. Feel free to add additional processing here,\n        // but if you want the App API to support tracking app url opens, make sure to keep this call\n        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n    }\n\n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n        // Called when the app was launched with an activity, including Universal Links.\n        // Feel free to add additional processing here, but if you want the App API to support\n        // tracking app url opens, make sure to keep this call\n        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\n    }\n\n}\n","size_bytes":3031},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}